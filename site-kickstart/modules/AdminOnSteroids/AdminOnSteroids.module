<?php namespace ProcessWire;

/**
 * AdminOnSteroids
 * ProcessWire admin tweaks to boost productivity.
 *
 * @author Roland Toth (tpr)
 *
 * ProcessWire 3.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 * FileCompiler=0
 */

class AdminOnSteroids extends WireData implements Module, ConfigurableModule
{
    public static $configData;
    public $adminTheme;
    protected $editedPage;
    protected $PageListThumbs_items;
    protected $PageListIcons;
    protected $settingsFile;
    protected $htmlClasses;
    protected $isLocaleSet;
    protected $allRoles;
    protected $enabledSubmodules;
    protected $isMultiLang = false;
    protected $languageCount = 0;

    public static function getModuleInfo()
    {
        return array(
            'title' => 'AdminOnSteroids',
            'class' => 'AdminOnSteroids',
            'version' => '2.0.16',
            'summary' => __('ProcessWire admin tweaks to boost productivity.'),
            'author' => 'Roland Toth',
            'autoload' => 'template=admin',
            'href' => 'https://processwire.com/talk/topic/13389-adminonsteroids/',
            'icon' => 'medkit',
            'requires' => 'ProcessWire>=2.8.0, PHP>=5.3.8',
            'singular' => true,
            'permanent' => false,
        );
    }

    public function __construct()
    {
        $this->settingsFile = __DIR__ . '/settings.php';
        if ($this->wire('languages')) {
            $this->isMultiLang = count($this->wire('languages')) > 0;
            $this->languageCount = count(wire('pages')->find('template=language, check_access=0'));
        }
    }

    /**
     * Default configuration for module
     *
     */
    public static function getDefaultData()
    {
        return array(
            'enabledSubmodules' => array(),
            'enabled' => 1,
            'restore' => '',
            'AddNewChildFirst_enabledTemplates' => array(),
            'AdminStyle' => '',
            'AdminScript' => '',
            'AdminTweaks' => array(),
            'AsmTweaks' => array(),
            'CKEStyle' => '',
            'CKEScript' => '',
            'CKEtemplates' => '',
            'CKEaddons_plugins' => array(),
            'CKEaddons_skin' => 'default',
            'CKEaddons_enabledFields' => '',
            'DeselectRadios' => array(
                'adminOnly',
            ),
            'FieldAndTemplateEditLinks' => 'pw-blank',
            'FieldOverrides' => '',
            'FieldOverridesFile' => '',
            'BrandingLogo' => '',
            'FileFieldTweaks' => array(),
            'FocusInputOnLangTabSwitch' => array(
                'focus',
            ),
            'FocusInputOnLangTabSwitchCKE' => array(
                'focus',
            ),
            'Hotkeys' => array(),
            'IUC_mode' => array(
                'button',
            ),
            'IUC_buttonPosition' => 'button-left',
            'IUC_target' => 'pw-blank',
            'IUC_forceHttp' => '',
            'IUC_enabledTemplates' => array(),
            'IUC_enabledFields' => array(),
            'ListerTweaks' => '',
            'ListerTweaks_find' => array(),
            'ListerTweaks_users' => array(),
            'ListerTweaks_options' => array(),
            'LongClickDuration' => 600,
            'Misc' => array(),
            'ModuleTweaks' => array(),
            'NavItems' => 1,
            'NavItems_pages' => array(),
            'NavItems_pages_submenu' => '',
            'NavItems_custom' => array(),
            'PagePreviewBtn' => 'pw-blank',
            'PageListThumbs' => array(),
            'PageListThumbs_style' => 'circle',
            'PageListThumbs_items' => '',
            'PageListIcons' => '',
            'PageListThumbs_options' => array(),
            'PageListTweaks' => array(),
            'RenoTweaks' => array(),
            'RestrictTreeDropdown' => '',
            'Tooltips' => array(),
            'UikitTweaks' => array(),
        );
    }

    public function __toString()
    {
        return __CLASS__;
    }

    protected function installColumnBreakField()
    {
        // use skipLabel and collapsed to avoid visiblity if AOS is uninstalled (no need to remove from templates)
        if ($this->wire('fields')->get('aos_column_break')) {
            return;
        }

        $field = new Field();
        $field->type = $this->wire('modules')->get('FieldtypeText');
        $field->name = 'aos_column_break';
        $field->label = '';
        $field->skipLabel = true;
        $field->collapsed = Inputfield::collapsedYesLocked;
        $field->tags = '-aos';
        $field->save();

        $this->message(__('Installed field "aos_column_break".', __FILE__));
    }

    protected function _installStickyField()
    {
        if ($this->wire('fields')->get('sticky')) {
            return;
        }

        $field = new Field();
        $field->type = $this->wire('modules')->get('FieldtypeInteger');
        $field->name = 'sticky';
        $field->inputType = 'number';
        $field->collapsed = Inputfield::collapsedBlank;
        $field->label = __('Sticky position', __FILE__);
        $field->description = __('The higher the value the higher on the pagelist will the page appear.', __FILE__);
        $field->tags = '-aos';
        $field->set('flags', Field::flagGlobal);
        $field->save();

        $this->message(__('Installed field "sticky".', __FILE__));
    }

    protected function _removeStickyField()
    {
        $sticky = $this->wire('fields')->get('sticky');
        $sticky->set('flags', false);
        $sticky->save();

        foreach ($this->wire('templates') as $template) {
            foreach ($template->fieldgroup as $field) {
                if ($field->name === 'sticky') {
                    $template->fieldgroup->remove($field);
                    $template->fieldgroup->save();
                }
            }
        }

        $this->wire('fields')->delete($sticky);
    }

    public function ___install()
    {
        @$previousSettings = file_get_contents($this->settingsFile);

        if ($previousSettings) {
            $previousSettings = json_decode($previousSettings, true);

            // check if "restore" is enabled
            if (isset($previousSettings['restore']) && $previousSettings['restore'] == 1) {
//                $settings = $previousSettings;
                $this->wire('modules')->saveModuleConfigData($this, $previousSettings);
            }
        }

        $this->installColumnBreakField();
    }

    public function ___uninstall()
    {
        // save current config to settings.php
        $settings = array_filter($this->wire('modules')->getModuleConfigData($this));
        @file_put_contents($this->settingsFile, json_encode($settings));
    }

    public function addClasses(HookEvent $event)
    {
        $allowedHtmlClasses = array(
            'adminColumns',
            'AdminThemeDefault',
            'AdminThemeUikit',
            'BrandingLogo',
            'headCompact',
            'hoverTopSubmenus',
            'asmCollapse',
            'asmLeftX',
            'asmCounter',
            'centerLogin',
            'downloadAssetButton',
            'editFieldWidth',
            'filterbox',
            'flatModules',
            'headBtnToTitle',
            'headSticky',
            'headStickyCompact',
            'hideAddNewDropdown',
            'hoverDropdown',
            'leftTopnav',
            'ListerTweaks',
            'listerHoverBtn',
            'moduleCompact',
            'moduleModal',
            'moveAssetButtons',
            'noAnim',
            'noFilenameTruncate',
            'noticeLeftX',
            'openSearch',
            'pListActiveBold',
            'pListCompact',
            'pListFullRowHover',
            'pListIconOnly',
            'pListShowActions',
            'pListCounters',
            'PageListThumbs',
            'highlightRows',
            'sbAutoHide',
            'sbItemsInline',
            'sbItemsVisible',
            'sbQuickLinksHide',
            'sbSticky',
            'scrollTop',
            'stickyCKE',
            'themeConfigLinks',
            'tooltipDesc',
            'tooltipNotes',
            'tooltipOverlay',
            'wide',
        );

        // eg. checkboxes inside fieldsets
        // need to add its PARENT submodule name to the allowed html classes
        $itemsToTreatAsSubmodule = array('ListerTweaks_options');

        foreach (array_merge($this->enabledSubmodules, $itemsToTreatAsSubmodule) as $submodule) {

            $this->addDOMClass($submodule);

            if (isset(self::$configData[$submodule]) && is_array(self::$configData[$submodule])) {
                foreach (self::$configData[$submodule] as $item) {
                    $this->addDOMClass(array($submodule, $item));
                }
            }
        }

        $html = $event->return;

        // add empty class to html (default theme has no html class but check always)
        if (!preg_match('/<html(.+)class=(.+)>/i', $html)) {
            $html = str_replace('<html', '<html class=""', $html);
        }

        if ($this->adminTheme === 'AdminThemeDefault') {
            $this->htmlClasses[] = 'AdminThemeDefault';
        }

        if ($this->adminTheme === 'AdminThemeUikit') {
            $this->htmlClasses[] = 'AdminThemeUikit';
        }

        if ($this->BrandingLogo) {
            $this->htmlClasses[] = 'BrandingLogo';
        }

        if (!$this->wire('user')->isSuperuser()) {
            if (($key = array_search('themeConfigLinks', $this->htmlClasses)) !== false) {
                unset($this->htmlClasses[$key]);
            }
        }

        $htmlClasses = implode(' ', array_intersect($allowedHtmlClasses, $this->htmlClasses));

        $event->return = preg_replace("/<html(.+)class=('|\")(.*?)('|\")/i",
            '<html$1class=$2aos $3 ' . $htmlClasses . '$4', $html);
    }

    public function addDOMClass($class)
    {
        if (is_array($class)) {

            // do not mess similar features enabled for another admin theme
            if (
                ($class[0] === 'AdminTweaks' && $this->adminTheme !== 'AdminThemeDefault') ||
                ($class[0] === 'RenoTweaks' && $this->adminTheme !== 'AdminThemeReno') ||
                ($class[0] === 'UikitTweaks' && $this->adminTheme !== 'AdminThemeUikit')
            ) {
                return false;
            }

            if (is_array($class[1])) {
                return $this->addDOMClass($class[0]);
            }

            if (in_array($class[1], self::$configData[$class[0]])) {
                $class = $class[1];
            } else {
                return '';
            }
        }

        $this->htmlClasses[] = $class;
    }

    public function ___modifyConfigData($data)
    {
        return $data;
    }

    public function init()
    {
        // populate self::$configData
        $configData = $this->wire('modules')->getModuleConfigData($this);
        self::$configData = $configData;

        if ($this->wire('user')->isSuperuser()) {

            if ($this->wire('input')->toggle == 1) {
                $configData['enabled'] = ($this->enabled == 1) ? 0 : 1;
                $this->wire('modules')->saveModuleConfigData($this, $configData);

                if (isset($_SERVER['HTTP_REFERER'])) {
                    $this->wire('session')->redirect($_SERVER['HTTP_REFERER']);
                    $this->halt();
                }
            }

            $this->addHookAfter('AdminTheme::getExtraMarkup', $this, 'addAOSToggleLink');
        }

        $this->allRoles = array();

        foreach ($this->roles as $role) {
            if ($role->name == 'guest') {
                continue;
            }
            $this->allRoles[$role->name] = $role->name;
        }

        if (!$this->enabled) {
            return;
        }

        $enabledSubmodules = self::$configData['enabledSubmodules'];

        // remove submodules where user's role is not allowed

        if (!$this->wire('user')->isSuperuser()) {
//        $userRoles = $this->wire('user')->roles->explode('name');
            $userRoles = $this->wire('user')->roles->name(',');

            // remove 'guest' role
            $userRoles = str_replace(array('guest', ',,'), array('', ','), $userRoles);
            $userRoles = trim($userRoles, ',');
            $userRoles = explode(',', $userRoles);

            foreach ($enabledSubmodules as $submodule) {

                $submoduleRoleField = $submodule . 'Roles';

                // continue if no roles have been set in module config (empty means allow all)
                if (empty($this->$submoduleRoleField)) {
                    continue;
                }

//            remove from array (by value) if there isn't a matching role
                if (count(array_intersect($this->$submoduleRoleField, $userRoles)) == 0) {
                    if (($key = array_search($submodule, $enabledSubmodules)) !== false) {
                        unset($enabledSubmodules[$key]);
                    }
                }
            }
        }

        $this->enabledSubmodules = $enabledSubmodules;

        // adminLangSwitcher (Misc)
        $subModule = 'Misc';

        // add to init() to change early
        if ($this->isMultiLang) {
            if (in_array($subModule, $enabledSubmodules)) {
                if (in_array('adminLangSwitcher', $configData[$subModule])) {
                    if (isset($_COOKIE['aos_lang_id'])) {
                        $lang_id = $_COOKIE['aos_lang_id'];
                        $item = $this->wire('pages')->get('template=language,id=' . $lang_id);
                        if ($item->id) {
                            $this->wire('user')->language = $lang_id;
                        }
                    }
                }
            }
        }
    }

    public function ready()
    {
        $config = $this->wire('config');
        $root = $config->urls->siteModules . 'AdminOnSteroids';
        $styles = $config->styles;
        $scripts = $config->scripts;
        $moduleInfo = static::getModuleInfo();
        $timestamp = $moduleInfo['version'] . '_' . date('YmdH');

        if ($this->wire('input')->get['name'] === 'AdminOnSteroids') {
            $scripts->add($root . '/scripts/aos_config.min.js?ts=' . $timestamp);
            $styles->prepend($root . '/styles/aos_config.min.css?ts=' . $timestamp);
            $styles->prepend($root . '/styles/aos.min.css?ts=' . $timestamp); // for the real-time aos settings preview

            if (!$this->wire('modules')->isInstalled('InputfieldAceExtended')) {
                $styles->add($root . '/CKE/plugins/codemirror/css/codemirror.min.css');
                $styles->add($root . '/CKE/plugins/codemirror/theme/twilight.css');
                $scripts->add($root . '/CKE/plugins/codemirror/js/codemirror.min.js');
                $scripts->add($root . '/CKE/plugins/codemirror/js/properties.js');
            }
        }

        if (!$this->enabled) {
            return false;
        }

        // set $this->editedPage
        // excluded repeater pages, minor refactoring
        $this->editedPage = false;
        $editedPageId = $this->wire('sanitizer')->int($this->wire('input')->get->id);
        $editedPage = $this->wire('pages')->get($editedPageId);

        if ($editedPage->id && !($editedPage instanceof RepeaterPage)) {
            $this->editedPage = $editedPage;
        }

        self::$configData = $this->modifyConfigData(
            $this->wire('modules')->getModuleConfigData($this),
            $this->editedPage
        );

        $styles->prepend($root . '/styles/aos.min.css?ts=' . $timestamp);

        // login page doesn't need some stuff
        if ($this->page->id != 23) {
            $scripts->add($root . '/scripts/aos.min.js?ts=' . $timestamp);

            // always load modal js
            $this->wire('modules')->get('JqueryUI')->use('modal');
        }

        $configData = self::$configData;
        $defaultData = self::getDefaultData();

        $enabledSubmodules = $this->enabledSubmodules;

        $this->htmlClasses = array();
        $jsFiles = array();
        $cssFiles = array();

        // if there's only the default admin theme, $user->admin_theme is not available
        $this->adminTheme = $this->wire('user')->admin_theme ? $this->wire('user')->admin_theme : $config->defaultAdminTheme;

        $this->PageListThumbs_items = array();
        $this->PageListIcons = array();

        $this->addHookAfter('Page::render', $this, 'addClasses');

        // add extra clases to admin body (by Robin S)
        $this->addHookAfter('AdminTheme::getExtraMarkup', $this, 'addAdminClasses');

        //NavItems
        $subModule = 'NavItems';

        if (in_array($subModule, $enabledSubmodules, true)) {
            if ($this->wire('page')->id !== 23) {
                $this->addHookAfter('Page::render', $this, 'addNavItems');
            }
        }

        if ($this->BrandingLogo) {
            $this->addHookAfter('Page::render', function (HookEvent $event) {
                $markup = $event->return;

                if ($this->adminTheme === 'AdminThemeUikit') {
                    $markup = str_replace($this->wire('config')->urls->adminTemplates . 'uikit/custom/images/pw-mark.png', $this->BrandingLogo, $markup);
                } elseif ($this->adminTheme === 'AdminThemeDefault') {
                    $markup = str_replace($this->wire('config')->urls->adminTemplates . 'styles/images/logo.png', $this->BrandingLogo, $markup);
                } elseif ($this->adminTheme === 'AdminThemeReno') {
                    $markup = str_replace('<a id="logo"', '<a id="logo" style="background-image: url(\'' . $this->BrandingLogo . '\');"', $markup);
                }

                $event->return = $markup;
            });
        }

        // AsmTweaks
        $subModule = 'AsmTweaks';

        if (in_array($subModule, $enabledSubmodules, true)) {

            if (in_array('asmShowFieldTypes', $configData[$subModule], true)) {
                $this->addHookBefore('InputfieldAsmSelect::render', $this, 'asmShowFieldTypes');
            }

            if (in_array('asmPlaceholder', $configData[$subModule], true)) {
                $this->addHookAfter('Field(type=FieldtypePage|FieldtypeOptions)::getConfigInputfields', $this, 'addAsmPlaceholderConfigField');
                $this->addHookAfter('InputfieldAsmSelect::render', $this, 'addAsmPlaceholder');
            }

            if (in_array('asmLimit', $configData[$subModule], true)) {
                $this->addHookAfter('Field(type=FieldtypePage|FieldtypeOptions)::getConfigInputfields', $this, 'addLimitItemsConfigField');
                $this->addHookAfter('InputfieldAsmSelect::render', $this, 'addAsmLimit');
            }

            if (in_array('asmSearchBox', $configData[$subModule], true)) {
                $this->addHookAfter('InputfieldAsmSelect::render', $this, 'addAsmSelectBox');
                $styles->add($root . '/scripts/vendor/select2/css/select2.min.css');
                $scripts->add($root . '/scripts/vendor/select2/js/select2.min.js'); // note: patched
            }
        }

        //FieldAndTemplateEditLinks
        $subModule = 'FieldAndTemplateEditLinks';
        if (in_array($subModule, $enabledSubmodules, true)) {

            if ($this->wire('user')->isSuperuser()) {

                // add template edit link (page action) to pagelist
                $this->addHookAfter('ProcessPageListActions::getActions', $this, 'addTemplateEditLinkPageList');

                if ($this->editedPage) {

                    if ($this->process == 'ProcessPageView' && $this->editedPage->template && $this->editedPage->template->flags !== Template::flagSystem) {
                        $this->addHookAfter('Page::render', $this, 'addTemplateEditLink');
                    }

                    $this->addHookAfter('Inputfield::render', $this, 'addFieldEditLinks');
                    $this->addHookAfter('Inputfield::renderValue', $this, 'addFieldEditLinks');
                }
            } else {
                // remove the submodule entirely if not superuser
                if (($key = array_search($subModule, $enabledSubmodules, true)) !== false) {
                    unset($enabledSubmodules[$key]);
                }
            }
        }

//        $this->addHookBefore('ProcessPageList::execute', function(HookEvent $event) {
        //            // overwrite GET lang parameter
        //            $this->input->get['lang'] = 1020;
        //        });

        //DeselectRadios
        //        $subModule = 'DeselectRadios';
        //        if (in_array($subModule, $enabledSubmodules)) {
        //            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
        //        }

        //InputfieldURLChecker
        $subModule = 'InputfieldURLChecker';
        if (in_array($subModule, $enabledSubmodules, true)) {

//            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
            //            $cssFiles[] = $root . '/' . $subModule . '/' . $subModule . '.css';

            $this->addHookAfter('InputfieldURL::renderValue', $this, 'addIUCLink');
            $this->addHookAfter('InputfieldURL::render', $this, 'addIUCLink');
            $this->addHookAfter('InputfieldPageAutocomplete::render', $this, 'addIUCLink');
        }

        //PageListTweaks
        $subModule = 'PageListTweaks';
        if (in_array($subModule, $enabledSubmodules, true)) {

            // always add hook to remove markup if tweak is disabled
            $this->addHookAfter('ProcessPageListRender::getPageLabel', $this, 'addPageListMarkup');

            if ($this->isMultiLang) {
                $this->addHookBefore('ProcessPageListRender::getPageLabel', $this, 'pageListMarkupGetLangValue');
            }

            // pListUnselect
            if (in_array('pListUnselect', $configData[$subModule], true)) {
                $this->addHookAfter('InputfieldPageListSelect::render', $this, 'addPageListUnselectButtons');
            }

            if ($this->wire('user')->isSuperuser()) {

                if (in_array('pListIDs', $configData[$subModule], true)) {
                    $this->addHookAfter('ProcessPageListRender::getPageLabel', $this, 'addPageListIDs');
                }

                if (in_array('deleteBtn', $configData[$subModule], true)) {
                    // add delete action to pagelist items (bypass trash)
                    $this->addHookAfter('ProcessPageListActions::getExtraActions', $this, 'addDeleteButton');
                    $this->addHookAfter('ProcessPageListActions::processAction', $this, 'addDeleteButtonAction');

                    // add delete field to page edit Delete tab
                    $this->addHookAfter('ProcessPageEdit::buildFormDelete', $this, 'addDeletePermanentlyField');
                    $this->addHookBefore('Pages::trash', $this, 'addDeletePermanentlyHook');
                }

                if (in_array('stickyBtn', $configData[$subModule], true)) {
                    $this->_installStickyField();
                    $this->addHookAfter('ProcessPageList::find', $this, 'stickyFindMod');
                    $this->addHookAfter('ProcessPageListActions::getExtraActions', $this, 'addStickyButton');
                    $this->addHookAfter('ProcessPageListActions::processAction', $this, 'addStickyButtonAction');
                    $this->addHookAfter('ProcessPageListRender::getPageLabel', $this, 'addStickyPageLabelIcon');
                    $this->addHookAfter('ProcessPageEdit::buildForm', $this, 'moveStickyFieldToSettings');
                }
            }

            if (in_array('refreshBtn', $configData[$subModule], true)) {
                $this->addHookAfter('ProcessPageListActions::getExtraActions', function (HookEvent $event) {

                    $page = $event->arguments('page');

                    $actions = array();
                    $adminUrl = $this->wire('config')->urls->admin . 'page/';

                    $actions['refresh'] = array(
                        'cn' => 'Refresh',
                        'name' => 'Refresh',
                        'url' => $adminUrl . '?action=refresh&id=' . $page->id,
                        'ajax' => true,
                    );

                    $event->return += $actions;
                });

                $this->addHookAfter('ProcessPageListActions::processAction', function (HookEvent $event) {

                    $page = $event->arguments(0);
                    $action = $event->arguments(1);

                    if ($action === 'refresh') {

                        $remove = false;
                        $refreshChildren = $page->id;

                        // remove item if there's no ID or it's in the Trash
                        if (!$page->id || ($page->parent && $page->parent->id == 7)) {
                            $remove = true;
                            $refreshChildren = 0;
                        }

                        $event->return = array(
                            'action' => $action,
                            'success' => true,
                            'page' => $page->id,
                            'updateItem' => $page->id,
                            'message' => 'Page refreshed.',
                            'remove' => $remove,
                            'refreshChildren' => $refreshChildren,
                        );
                    }
                });
            }

            if (in_array('pListTrash', $configData[$subModule], true)) {
                if (!$this->wire('user')->isSuperuser()) {
                    $this->addHookAfter('ProcessPageListActions::getExtraActions', $this, 'addTrashButton');
                }
            }

//            if (in_array('pListLangs', $configData[$subModule])) {
            //                if ($this->isMultiLang && $this->languageCount > 1) {
            //                    $this->addHookAfter("ProcessPageListRender::getPageLabel", $this, 'addLanguageIndicators');
            //                }
            //            }
        }

        // ListerTweaks

        $subModule = 'ListerTweaks';
        // default columns: only add hook if there's no bookmark requested
        if (in_array($subModule, $enabledSubmodules, true) && (!isset($_SERVER['HTTP_REFERER']) || strpos($_SERVER['HTTP_REFERER'], '?bookmark=') === false) && (!empty(self::$configData['ListerTweaks_find']) || !empty(self::$configData['ListerTweaks_users']))) {
            $this->addHookBefore('ProcessPageLister::execute', function ($event) {

                // do not mess with ListerPro
                if ($this->wire('page')->process == 'ProcessPageListerPro') {
                    return false;
                }

                $lister = $event->object;
                $columns = array();
                $pagePath = $this->page->path;
                $defaultData = self::getDefaultData();

                // 1007: Find
                // 29: Users
                if (strpos($pagePath, '/page/lister/') !== false) {
                    $listerType = 'ListerTweaks_find';
                } elseif (strpos($pagePath, '/access/users/') !== false) {
                    $listerType = 'ListerTweaks_users';
                }

                if (!isset($listerType)) {
                    return false;
                }

                $defaultFields = $defaultData[$listerType];

                if (!empty(self::$configData[$listerType])) {
                    foreach (self::$configData[$listerType] as $ff) {
                        if ($ff === '[DEFAULTS]') {
                            $columns += $defaultFields;
                            continue;
                        }
                        $columns[] = $ff;
                    }
                }

                if (!empty($columns)) {
//                    $lister->sessionSet('columns', false);
                    //                } else {
                    $lister->sessionSet('columns', $columns);
                }

            });
        }

        //RestrictTreeDropdown
        $subModule = 'RestrictTreeDropdown';

        if (in_array($subModule, $enabledSubmodules, true)) {
            $user = $this->wire('user');
            $selected_roles = $this->RestrictTreeDropdown;

            if (!empty($selected_roles)) {

                $prevent_dropdown = false;
                if (in_array('all-roles', $selected_roles, true)) {
                    $prevent_dropdown = true;
                } elseif (!$this->wire('user')->isSuperuser() && in_array('nonsuperuser', $selected_roles, true)) {
                    $prevent_dropdown = true;
                } elseif (count(array_intersect($selected_roles, $user->roles->explode('name')))) {
                    $prevent_dropdown = true;
                }

//                if ($prevent_dropdown) {
                $configData['RestrictTreeDropdown'] = $prevent_dropdown;
//                }
            }
        }

        //AddNewChildFirst

        $subModule = 'AddNewChildFirst';

        if (in_array($subModule, $enabledSubmodules, true)) {

            $this->addHookAfter('Pages::added', function (HookEvent $event) {
                $page = $event->arguments[0];
                $selected_templates = $this->AddNewChildFirst_enabledTemplates;

                if (is_array($selected_templates) && array_intersect(array('__all__', $page->template->name),
                    $selected_templates)
                ) {
                    $this->wire('pages')->sort($page, 0);
                }
            });
        }

        // FieldOverrides
        $subModule = 'FieldOverrides';
        if (in_array($subModule, $enabledSubmodules, true)) {

            if ($this->isOnPageEditScreen()) {

                $fieldoverrides_admin_contents = array();
                $fieldoverrides_file_contents = array();

                // check wether there is file-based settings
                if ($this->FieldOverridesFile && file_exists($this->FieldOverridesFile)) {

                    // make array if file-based settings is an ini file
                    $filename_array = explode('.', $this->FieldOverridesFile);
                    $extension = end($filename_array);

                    if ($extension === 'ini') {
                        $file_contents = file_get_contents($this->FieldOverridesFile);
                        $fieldoverrides_file_contents = parse_ini_string($file_contents, true);
                    } else {
                        if ($extension === 'php') {
                            include_once $this->FieldOverridesFile;
                            // $fieldoverrides should be the name of the array in the included file
                            if ($fieldoverrides !== null && is_array($fieldoverrides)) {
                                $fieldoverrides_file_contents = $fieldoverrides;
                            }
                        }
                    }
                }

                // make array from admin-based settings (only ini format)
                if (!empty($this->FieldOverrides)) {
                    $fieldoverrides_admin_contents = parse_ini_string($this->FieldOverrides, true);
                }

                // merge the two
                $fieldoverrides = array_merge($fieldoverrides_admin_contents, $fieldoverrides_file_contents);

                if (!empty($fieldoverrides)) {
                    $this->FieldOverrides = $fieldoverrides;
                    $this->addHookBefore('Field::getInputfield', $this, 'setFieldOverrides');
                }
            }
        }

        //FocusInputOnLangTabSwitch
        //        $subModule = 'FocusInputOnLangTabSwitch';
        //        if (in_array($subModule, $enabledSubmodules)) {
        //            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
        //        }

        //Hotkeys
        $subModule = 'Hotkeys';
        if (in_array($subModule, $enabledSubmodules, true)) {

            // add breadcrumb tweaks
            if (in_array('breadcrumbTweaks', $configData[$subModule], true)) {

                $editedPage = $this->editedPage;

                if ($editedPage && $editedPage->id) {
                    $homepage = $this->wire('pages')->get(1);
                    $breadcrumbUrls = array();

                    foreach ($editedPage->parents() as $p) {
//                        $p->of(false);    // fix breadcrumb html-encoded value issue (fixed in PW 3.05x)
                        $breadcrumbUrls[] = array(
                            'url' => $p->viewable() ? $p->httpUrl : null,
                            'editUrl' => $p->editable() ? $p->editUrl : null,
                        );
                    }

                    $this->wire('config')->js('AOS_breadcrumbs', $breadcrumbUrls); // add to js config (head)
                }
            }
            // see main js file
            //            $jsFiles[] = $root . '/' . $subModule . '/' . $subModule . '.js';
        }

        //LongClickDuration
        $subModule = 'LongClickDuration';
        if (in_array($subModule, $enabledSubmodules, true)) {

            $LongClickDuration = (int) $configData['LongClickDuration'];

            //do not allow lower value than default 600
            $LongClickDuration = ($LongClickDuration < $defaultData['LongClickDuration']) ? $defaultData['LongClickDuration'] : $LongClickDuration;

            $configSettings['LongClickDuration'] = $LongClickDuration;
        } else {
            // need to set default value explicitly
            $configSettings['LongClickDuration'] = $defaultData['LongClickDuration'];
        }

        // CKEaddons
        $subModule = 'CKEaddons';

        if (in_array($subModule, $enabledSubmodules, true)) {
            if (in_array('linkfilesmenu', $configData['CKEaddons_plugins'], true)) {
                $this->addHookBefore('ProcessLogin::executeLogout', $this, 'CkeLinkFilesAjaxResponse');
                $this->addHookAfter('ProcessPageEdit::execute', $this, 'CkeLinkFilesPageEditMods');
            }
        }

        // Misc
        $subModule = 'Misc';
        if (in_array($subModule, $enabledSubmodules, true)) {

            // addFieldWrapAttributes
            if (in_array('addFieldWrapAttributes', $configData[$subModule], true)) {
                $this->addHookAfter('Inputfield::render', $this, 'addFieldWrapAttributes');
            }
            
            // adminColumns
            if (in_array('adminColumns', $configData[$subModule], true)) {
                // make sure field is available
                $this->installColumnBreakField();
                $this->addHookAfter('ProcessPageEdit::buildFormContent', $this, 'setupAdminColumns');
                $jsFiles[] = $root . '/scripts/vendor/split.js/split.min.js';
            }

            // adminLangSwitcher
            if (in_array('adminLangSwitcher', $configData[$subModule], true)) {
                $this->addHookAfter('AdminTheme::getExtraMarkup', $this, 'addAdminLangSwitcher');
            }

            // uncheckAddnewActive
            if (in_array('uncheckAddnewActive', $configData[$subModule], true)) {
                $this->addHookAfter('InputfieldPageName::render', $this, 'uncheckAddnewActive');
            }

            // addTranslatorLinks
            if (in_array('addTranslatorLinks', $configData[$subModule], true)) {
                if ($this->wire('page')->process == 'ProcessLanguageTranslator' && $this->languageCount > 1) {
                    $this->addHookAfter('ProcessLanguageTranslator::executeEdit', $this, 'addTranslatorLinks');
                }
            }

            // logsHelperTweaks
            if (in_array('logsHelperTweaks', $configData[$subModule], true)) {
                $this->addHookAfter('InputfieldFieldset(id=FieldsetTools)::render', $this, 'expandFieldsetToolsField');
                $this->addHookAfter('InputfieldSelect(id=Inputfield_action,is_replacement!=1)::render', $this, 'replaceLogActionsWithRadios');
            }

            // inputMask
            if (in_array('inputMask', $configData[$subModule], true)) {
                $this->addHookAfter('Field(type=FieldtypeText|FieldtypeTextLanguage)::getConfigInputfields', $this, 'addInputMaskConfigField');
                $this->addHookAfter('InputfieldText::render', $this, 'addInputMask');

                $scripts->add($root . '/scripts/vendor/cleave.js/cleave.min.js');

                if (in_array('inputMaskPhoneLib', $configData[$subModule], true)) {
                    $scripts->add($root . '/scripts/vendor/cleave.js/cleave-phone.i18n.js');
                }
            }

            // load CSS for miniScrollbar
            if (in_array('miniScrollbar', $configData[$subModule], true)) {
                $styles->add($root . '/styles/scrollbar.css');
            }

            // showSystemTemplates
            if (in_array('showSystemTemplates', $configData[$subModule], true)) {

                if ($this->wire('user')->isSuperuser()) {
                    $this->addHookBefore('ProcessField::buildEditFormInfo', function () {
                        // Show system templates in templates list of Edit Field
                        $this->wire('config')->advanced = true;
                    });

                    $this->addHookBefore('ProcessTemplate::executeNavJSON', function () {
                        // Show system templates in admin menu
                        $this->wire('config')->advanced = true;
                    });

                    if (!$this->wire('input')->get('id') && $this->wire('page')->process == 'ProcessTemplate') {
//                $this->addHookAfter('Session::loginSuccess(roles=superuser)', null, function () {
                        // Show system templates in templates list unless explicitly hidden
                        $this->wire('session')->set('ProcessTemplateFilterSystem', 1);
                    }
//                });
                }
            }

            // autosizeTextareas
            if (in_array('autosizeTextareas', $configData[$subModule], true)) {
                $jsFiles[] = $root . '/scripts/vendor/autosize/autosize.min.js';
            }

            if (in_array('translatorModal', $configData[$subModule], true)) {
                $this->addHookAfter('InputfieldFile::render', function ($event) {
                    if (wire('page')->name === 'languages' && strpos(wire('page')->path, '/setup/languages') !== false) {
                        $event->return = str_replace("<a class='action'", "<a class='action pw-modal pw-modal-full' data-buttons='#save_translations, #save_translations_clone_close' data-autoclose='#save_translations_clone_close'", $event->return);
                    }
                });
            }

            // extendedFieldList
            if (in_array('extendedFieldList', $configData[$subModule], true)) {
                $this->addHookAfter('ProcessField::getListTableRow', function (HookEvent $event) {

                    $field = $event->arguments(0);
                    $data = $event->return;

                    if (!empty($data[2])) {

                        $description = '';
                        $notes = '';
                        $langID = '';

                        if ($this->isMultiLang && !$this->wire('user')->language->isDefaultLanguage) {
                            $langID = $this->wire('user')->language->id;
                        }

                        if ($field->description) {
                            $description = '<small class="description" title="description" style="line-height: 1.33; display: block; min-width: 180px;">' . $field->get('description' . $langID) . '</small>';
                        }
                        if ($field->notes) {
                            $notes = '<small class="notes" title="notes" style="line-height: 1.3; display: block; min-width: 130px;">' . $field->get('notes' . $langID) . '</small>';
                        }
                        $data[] = $description;
                        $data[] = $notes;
                        $data[] = '<small title="id">' . $field->id . '</small>';
                    }

                    if ($field->inputfieldClass && isset($data[1])) {
                        $className = str_replace('Inputfield', '', $field->inputfieldClass);

                        if ($className !== $field->type->shortName) {
                            $data[1] .= ' (' . $className . ')';
                        }
                    }

                    $event->return = $data;
                });
            }

            // prevNextLinks
            if (in_array('prevNextLinks', $configData[$subModule])) {
                if (
                    in_array($this->wire('page')->process, array('ProcessPageEdit', 'ProcessUser', 'ProcessRole'))
                    && $this->wire('input')->id
                    && $this->editedPage
//                    && !($this->editedPage->template->flags && $this->editedPage->template->flags === Template::flagSystem)
                ) {

                    // sort precedence: template level - page level - "sort"
                    $sortfield = 'sort';
                    $parent = $this->editedPage->parent();

                    if ($parent->id) {
                        $sortfield = $parent->template->sortfield ?: $parent->sortfield;
                    }

                    $baseSelector = 'include=all, template!=admin, id!=' . $this->wire('config')->http404PageID . ', parent=' . $parent;
                    $prevnextlinks = array();
                    $isFirst = false;
                    $isLast = false;
                    $numSiblings = $parent->numChildren(true);

                    if ($numSiblings > 1) {

                        $selector = $baseSelector . ', sort=' . $sortfield;

                        if (strpos($sortfield, '-') === 0) {
                            $sortfieldReversed = ltrim($sortfield, '-');
                        } else {
                            $sortfieldReversed = '-' . $sortfield;
                        }

                        $next = $this->editedPage->next($selector);
                        $prev = $this->editedPage->prev($selector);

                        if (!$next->id) {
                            $next = $this->editedPage->siblings($selector . ', limit=1')->first();
                            $isFirst = true;
                        }

                        if (!$prev->id) {
                            $prev = $this->editedPage->siblings($baseSelector . ', limit=1, sort=' . $sortfieldReversed)->first();
                            $isLast = true;
                        }

                        $edit_next_text = $isFirst ? ' ' . __('Edit first:', __FILE__) : __('Edit next:', __FILE__);
                        $edit_prev_text = $isLast ? ' ' . __('Edit last:', __FILE__) : __('Edit previous:', __FILE__);

                        if ($prev && $prev->id && $prev->editable()) {
                            $prevnextlinks['prev'] = array(
                                'title' => $edit_prev_text . ' ' . ($prev->title ? $prev->title : $prev->name),
                                'url' => $prev->editUrl,
                            );
                        }

                        if ($next && $next->id && $next->editable()) {
                            $prevnextlinks['next'] = array(
                                'title' => $edit_next_text . ' ' . ($next->title ? $next->title : $next->name),
                                'url' => $next->editUrl,
                            );
                        }

                        // add js chunk to be expanded as HTML
                        if (!empty($prevnextlinks)) {
                            $this->wire('config')->js('AOS_prevnextlinks', $prevnextlinks);
                        }
                    }
                }
            }
        }

        // langTabHotkeySwitcher
        //            if (in_array('langTabHotkeySwitcher', $configData[ $subModule ])) {
        //                $jsFiles[] = $root . '/LangTabHotkeySwitcher/LangTabHotkeySwitcher.js';
        //            }

        // ModuleTweaks
        $subModule = 'ModuleTweaks';
        if (in_array($subModule, $enabledSubmodules)) {

            if (in_array('loadCollapsedModuleInfos', $configData[$subModule])) {
                // Load module info fields collapsed
                $this->addHookAfter('InputfieldMarkup::render', function ($event) {
//                $this->addHookBefore('Inputfield::render', function ($event) {
                    $field = $event->object;
                    if ($field->id === 'ModuleInfo') {
//                        $field->collapsed = Inputfield::collapsedYesAjax;
                        //                        $field->collapsed = Inputfield::collapsedNo;
                        $field->collapsed = Inputfield::collapsedYes;
//                        $field->addClass('InputfieldStateCollapsed');
                    }
                });
            }

            if (in_array('moduleBrowserTitle', $configData[$subModule])) {
                // set browser title to module name
                if ($this->page->process && $this->page->process == 'ProcessModule') {
                    $this->wire('processBrowserTitle', $this->input->get('name'));
                }
            }

            if (in_array('moduleModal', $configData[$subModule])) {
                // load longclick js
                if ($this->page->process && $this->page->process == 'ProcessModule') {
                    $this->wire('modules')->get('JqueryCore')->use('longclick');
                }
            }
        }

        $subModule = 'PageListIcons';
        if (in_array($subModule, $enabledSubmodules)) {
            // use addHookBefore to add icon early (otherwise skips first!)
            $this->addHookBefore('ProcessPageListRender::getPageLabel', $this, 'addPageListIcon');
            $this->addHookAfter('ProcessPageListRender::getPageLabel', $this, 'replacePageListIconUnderscores');
        }

        $subModule = 'PageListThumbs';
        if (in_array($subModule, $enabledSubmodules)) {
            $this->addHookAfter('ProcessPageListRender::getPageLabel', $this, 'addPageListThumb');
        }

        $subModule = 'FileFieldTweaks';
        if (in_array($subModule, $enabledSubmodules)) {
            if (in_array('downloadAssetButton', $configData[$subModule])) {
                $this->addHookAfter('InputfieldImage::renderButtons', $this, 'addDownloadAssetLink');
                $this->addHookAfter('InputfieldFile::renderItem', $this, 'addDownloadAssetLink');
            }
            if (in_array('moveAssetButtons', $configData[$subModule])) {
//                $this->addHookAfter('InputfieldImage::renderButtons', $this, 'addMoveAssetButtons');
                $this->addHookAfter('InputfieldFile::renderItem', $this, 'addMoveAssetButtons');
            }
            if (in_array('imgSelectTitle', $configData[$subModule])) {
                $this->addHookAfter('ProcessPageEditImageSelect::execute', function ($event) {
                    $event->return .= "<script>if($('ul#select_images').length && window.addImageSelectLabels) addImageSelectLabels($('ul#select_images'));</script>";
                });
            }
            if (in_array('noFilenameTruncate', $configData[$subModule])) {
                $this->addHookBefore('InputfieldFile::render', $this, 'disableFilenameTruncate');
            }
        }

        // add translations
        $configData['loc'] = array(
            'add_new' => __('Add new', __FILE__),
            'save' => __('Save', __FILE__),
            'save_and_close' => __('Save + Close', __FILE__),
            'save_and_exit' => __('Save + Exit', __FILE__),
            'save_and_reload' => __('Save + Reload', __FILE__),
            'remove_all_fields' => __('Remove All', __FILE__),
            'apply_to_all' => __('Apply to all', __FILE__),
            'check_all' => __('Check all', __FILE__),
            'clear_all' => __('Clear all', __FILE__),
            'removing' => __('Removing...', __FILE__),
            'cancel' => __('Cancel', __FILE__),
            'delete_action' => __('Delete', __FILE__),
            'permanent_delete_confirm' => __('Delete permanently?', __FILE__),
            'untitled' => __('Untitled', __FILE__),
            'asm_max_limit' => __('Maximum items allowed:', __FILE__),
        );

        // add modified enabledSubmodules to JS config (modified by roles)
        // note: array_values is used to have values-only array in JS
        $configData['enabledSubmodules'] = array_values($enabledSubmodules);
        $configData['aosUrl'] = $config->urls->AdminOnSteroids;
//        $configData['aosModuleUrl']      = $config->urls->admin . 'module/edit?name=AdminOnSteroids';

        // do not add JS to page on login page
        if ($this->wire('page')->id != 23) {

            // custom CKEaddons config js and css
            $this->addAsset('CKEStyle', $configData);
            $this->addAsset('CKEScript', $configData);
            $this->addAsset('CKEtemplates', $configData);

            // add css and js files
            foreach ($cssFiles as $cssFile) {
                $styles->add($cssFile);
            }

            foreach ($jsFiles as $jsFile) {
                $scripts->add($jsFile);
            }

            // write module js config to page
            $this->wire('config')->js('AdminOnSteroids', json_encode($configData));
        }

        // add admin CSS/JS
        $this->addAsset('AdminStyle', $configData);
        $this->addAsset('AdminScript', $configData);
    }

    public function expandFieldsetToolsField(HookEvent $event)
    {
        $field = $event->object;
        $field->collapsed = Inputfield::collapsedNo;
        $field->label = '';
        $field->wrapAttr('class', 'aos_no-inputfield-padding');
    }

    public function addFieldWrapAttributes(HookEvent $event)
    {
        $field = $event->object;
        $f = $field->hasField;

        if(!$f) {
            return false;
        }

        $field->wrapAttr('data-field-id', $f->id);
        $field->wrapAttr('data-field-name', $f->name);
        $field->wrapAttr('data-field-type', $f->type);
        $field->wrapAttr('data-field-tags', $f->tags);
        $field->wrapAttr('data-field-flags', $f->flags);
        $field->wrapAttr('data-field-inputfieldclass', $f->inputfieldClass);
    }

    // replace select box for Actions field on Logs page
    public function replaceLogActionsWithRadios(HookEvent $event)
    {
        $field = $event->object;
        $config = $this->wire('config');

        $radios = wire('modules')->get('InputfieldRadios');
        $radios->name = 'action';
        $radios->is_replacement = '1'; // custom property for the conditional hook (to run only 1 times)
        $field->wrapAttr('class', 'InputfieldRadios');

        $radios->addOptions($field->options);

        // need to manually load css
        $config->styles->add($config->urls->modules . '/Inputfield/InputfieldRadios/InputfieldRadios.css');

        $event->return = $radios->render();
    }

    // uncheck "Active?" checkbox next to language names when adding a new page
    public function uncheckAddnewActive(HookEvent $event)
    {
        $page = $this->wire('page');

        if ($page->process == 'ProcessPageAdd' || ($page->process == 'ProcessPageEdit' && $this->wire('input')->get('new') == 1)) {
            $event->return = str_replace("checked='checked'", '', $event->return);
        }
    }

    public function addAsset($assetName, &$configData)
    {
        if (!isset($configData[$assetName])) {
            return false;
        }

        $asset = trim($configData[$assetName], '/ ');
        $config = $this->wire('config');

        if ('' !== $asset) {

            // allow absolute or relative url
            $baseUrl = strpos($asset, 'http') !== false ? '' : $config->urls->httpRoot;
            $basePath = strpos($asset, 'http') !== false ? '' : $config->paths->root;

            $assetUrl = $baseUrl . $asset;
            $assetPath = $basePath . $asset;

            $assetUrl .= '?v=' . @filemtime($assetPath);

            if (strpos($assetName, 'CKE') !== false) {
                $configData['custom' . $assetName] = $assetUrl;
            } elseif ($assetName === 'AdminStyle') {
                $config->styles->add($assetUrl);
            } elseif ($assetName === 'AdminScript') {
                $config->scripts->add($assetUrl);
            } elseif ($assetName === 'PhoneCountryLib') {
                $config->scripts->add($assetUrl);
            }
        }
    }

    /**
     * Method to disable submodule (in Hooks).
     *
     * @param $submoduleName string
     * @param $configData    array
     *
     * @return array
     */
    public static function disableSubmodule($submoduleName, $configData)
    {
        $enabledSubmodules = $configData['enabledSubmodules'];
        $key = array_search($submoduleName, $enabledSubmodules);

        if ($key !== false) {
            unset($enabledSubmodules[$key]);
            $configData['enabledSubmodules'] = array_values($enabledSubmodules);
        }

        return $configData;
    }

    /**
     * Method to remove tweak from submodule (in Hooks).
     *
     * @param $tweakName     string
     * @param $submoduleName string
     * @param $configData    array
     *
     * @return array
     */
    public static function disableTweak($submoduleName, $tweakName, $configData)
    {

        if (isset($configData[$submoduleName])) {
            $submodule = $configData[$submoduleName];

            $key = array_search($tweakName, $submodule);

            if ($key !== false) {
                unset($submodule[$key]);
                $configData[$submoduleName] = array_values($submodule);
            }
        }

        return $configData;
    }

    public function addLanguageIndicators(HookEvent $event)
    {
        static $langs;

        $markup = $event->return;
        $p = $event->arguments('page');
        $page_languages = $p->getLanguages();
        $l = '';

        if ($langs === null) {
            $langs = wire('pages')->find('template=language,check_access=0');
        }

        //  show only if not all languages are active on the page
        if (count($page_languages) === 0 || count($langs) === count($page_languages)) {
            return false;
        }

        $page_language_ids = $page_languages->id();

        foreach ($langs as $lang) {
            $l .= '<b' . (in_array($lang->id, $page_language_ids) ? '  class="active"' : '') . ' title="' . $lang->title . '">' . mb_substr($lang->title, 0, 3) . '</b>';
        }

        $event->return = $markup . '<i class="pagelist-langs">' . $l . '</i>';
    }

    public function addPageListIDs(HookEvent $event)
    {

        $markup = $event->return;
        $page = $event->arguments('page');

        // uncomment to disable in Tree menu
        //        $options = $event->arguments('options');
        //        if(!empty($options['noTags'])) return;

        // append an empty span with data-id after pagelist item text content
        if (strpos($markup, '<span') === false) {

            // check if there's a template icon
            // if found, save it to $icon, add the span, then prepend

            $icon = '';

            if (strpos($markup, '</i>') !== false) {
                $icon_with_markup = explode('</i>', $markup, 2);
                $icon = $icon_with_markup[0] . '</i>';
                $markup = $icon_with_markup[1];
            }

            $label_with_markup = explode('<', $markup, 2);

            $markup = $icon . trim($label_with_markup[0]) . '<span></span>' . (isset($label_with_markup[1]) ? ' <' . $label_with_markup[1] : '');
        }

        // check for label_title first and if not found, do a general str_replace.
        if (strpos($markup, 'label_title') !== false) {
            $markup = str_replace("<span class='label_title'",
                "<span class='label_title' data-pid='" . $page->id . "' ",
                $markup);

        } else {

            // limit the replacement to the first match
            $needle = '<span';
            $pos = strpos($markup, $needle);

            if ($pos !== false) {
                $markup = substr_replace($markup, "<span data-pid='" . $page->id . "' ", $pos, strlen($needle));
            }
        }

        $event->return = $markup;
    }

    /**
     * Disable filename truncation for InputfieldFile
     * https://github.com/processwire/processwire-requests/issues/83
     * https://github.com/rolandtoth/AdminOnSteroids/issues/39
     *
     * @param HookEvent $event
     */
    public function disableFilenameTruncate(HookEvent $event)
    {

        // do not process Image (and other) fields
        if ($event->object instanceof FieldtypeFile) {
            return;
        }

        // noShortName is used by InputfieldFile but not available as a config option
        $event->object->noShortName = 1;
    }

    public function addPageListMarkup(HookEvent $event)
    {
        $page = $event->arguments[0];
        $markup = $event->return;
        $submodule = 'PageListTweaks';
        $pageLabelField = $page->template->pageLabelField;

        if ($pageLabelField === '') {
            return false;
        }

        // using '//' in front temporarily disables the custom markup (return default "title")
        if (strpos($pageLabelField, '//') === 0) {
            $event->return = $page->title;

            return false;
        }

        // replace common tokens
        $markup = strtr($markup,
            array(
                '%createdUser%' => $page->createdUser->name,
                '%modifiedUser%' => $page->modifiedUser->name,
            )
        );

        $markupStartRegex = "/\[([A-Za-z]*)(\.)?([A-Za-z0-9-_\.]*)\]/";
        $markupCloseRegex = "/\[\/([A-Za-z]*?)\]/";
        $dateRegex = "/\(([0-9]*)\|date(:([a-zA-sZ:.\%_ \-\/]*))?\)*/";

        if (isset(self::$configData[$submodule]) && in_array('pListMarkup', self::$configData[$submodule])) {

            // dates
            // format: (timestamp|date:Y-m-d)
            // (2313121|date:Y-m-d sd)
            // (2313121|date)
            // (|date:H:i:is)
            // (|date)
            // {title} [em][i]modified ({modified}|date:relative) by %modifiedUser%[/i][/em]

            $markup = preg_replace_callback($dateRegex, function ($match) {

                $out = '&#216;';

                // set locale in config.php
                if (!$this->isLocaleSet) {
                    $configLocale = $this->wire('config')->getLocale;

                    if (is_object($configLocale) && ($configLocale instanceof \Closure)) {
                        setlocale(LC_ALL, $configLocale());
                        $this->isLocaleSet = true;
                    }
                }

                $dateString = $match[1];

                if (!empty($dateString)) {
                    $format = isset($match[2]) ? ltrim($match[2], ':') : '%Y-%m-%d';
//                    $out = strftime($format, $dateString);
                    $out = $this->wire('datetime')->date($format, $dateString);
                }

                return $out;

            }, $markup);

            // starting tags with/without class
            $markup = preg_replace_callback($markupStartRegex, function ($match) {
                $class = (isset($match[2]) && isset($match[3]) && $match[2] == '.') ? ' class="' . $match[3] . '"' : '';

                // PW removes space and underscores
                $class = str_replace('.', ' ', $class);
                $class = str_replace('__', '-', $class);

                return '<' . $match[1] . $class . ' data-pitem>';
            }, $markup);

            // closing tags
            $markup = preg_replace($markupCloseRegex, '</$1>', $markup);

        } else { // tweak is disabled, cleanup markup to avoid showing tokens

            // remove dates
            $markup = preg_replace($dateRegex, '', $markup);

            // remove markup tokens
            $markup = preg_replace($markupStartRegex, '', $markup);
            $markup = preg_replace($markupCloseRegex, '', $markup);
        }

        // also remove empty tags
        $markup = preg_replace("/<[A-Za-z]+><\/[A-Za-z]+>/", '', $markup);

        //$event->return = utf8_decode($markup);
        $event->return = $markup;
    }

    public function asmShowFieldTypes(HookEvent $event)
    {
        $field = $event->object;

        if($field->label !== 'Fields') {
            return false;
        }

        $options = $field->options;
        $optionAttributes = $field->optionAttributes;

        foreach($field->options as $key => $name) {
            $f = $this->wire('fields')->get(trim($name, '*'));

            if(!$f) {
                continue;
            }

            $className = str_replace('Fieldtype', '', $f->type);
            $inputfieldClass = str_replace('Inputfield', '', $f->inputfieldClass);

            $optionAttributes[$key]['data-status'] = str_replace($className, '', trim($optionAttributes[$key]['data-status']));

            if($inputfieldClass !== '' && $inputfieldClass !== $className && $className !== $inputfieldClass . 'Language') {
                $className .= ' (' . $inputfieldClass . ')';
            }

            $options[$key] = $name . ' &ndash; ' . $className;
        }

        $field->options = $options;
        $field->optionAttributes = $optionAttributes;
    }

    public function addAsmPlaceholder(HookEvent $event)
    {
        $field = $event->object;
        $property = 'asmPlaceholder';

        $placeholder = $field->$property ? $field->$property : ($field->hasField ? $field->hasField->$property : false);

        if ($placeholder) {
            $script = '<script>initAsmPlaceholder("' . $field->id . '")</script>';
            $event->return = $script . str_replace('select ', 'select ' . 'data-asm-placeholder="' . $placeholder . '" ', $event->return);
        }
    }

    public function addAsmLimit(HookEvent $event)
    {
        $field = $event->object;
        $property = 'asmLimit';

        $limit = $field->$property ? $field->$property : ($field->hasField ? $field->hasField->$property : false);

        if ($limit) {
            $script = '<script>initAsmLimit("' . $field->id . '")</script>';
            $event->return = $script . str_replace('select ', 'select ' . 'data-asm-limit="' . $limit . '" ', $event->return);
        }
    }

    public function addAsmSelectBox(HookEvent $event)
    {
        $field = $event->object;

        if ($field->attr('data-no-asm-searchbox') === '1') {
            return;
        }

        $id = $field->attr('id');

        $script = "<script>initAsmSelectBox('$id');</script>";

        $event->return .= $script;
    }

    public function addAsmPlaceholderConfigField(HookEvent $event)
    {
        // The field being edited
        $field = $event->object;

        // The inputfield wrapper
        $wrapper = $event->return;
        $f_before = false;

        if ($field->type == 'FieldtypePage') {
            $f_before = $wrapper->getChildByName('required');
        } else {
            if ($field->type == 'FieldtypeOptions') {
                $f_before = $wrapper->getChildByName('defaultValue');
            }
        }

        if (!$f_before) {
            return;
        }

        $f = $this->wire('modules')->get('InputfieldText');
        $f->attr('name', 'asmPlaceholder');
        $f->label = $this->_('Placeholder');
        $f->value = $field->asmPlaceholder;
        $f->useLanguages = true;
        $f->collapsed = Inputfield::collapsedBlank;

        $wrapper->insertAfter($f, $f_before);
    }

    public function addLimitItemsConfigField(HookEvent $event)
    {
        // The field being edited
        $field = $event->object;

        // The inputfield wrapper
        $wrapper = $event->return;
        $f_before = false;

        if ($field->type == 'FieldtypePage') {
            $f_before = $wrapper->getChildByName('required');
        } else {
            if ($field->type == 'FieldtypeOptions') {
                $f_before = $wrapper->getChildByName('defaultValue');
            }
        }

        if (!$f_before) {
            return;
        }

        $f = $this->wire('modules')->get('InputfieldInteger');
        $f->attr('name', 'asmLimit');
        $f->label = $this->_('Max limit of items');
        $f->inputType = 'number';
        $f->min = 0;
        $f->value = $field->asmLimit;
        $f->collapsed = Inputfield::collapsedBlank;

        $wrapper->insertAfter($f, $f_before);
    }

    public function addInputMask(HookEvent $event)
    {
        $field = $event->object;
        $field_base_id = $field->attr('id');
        $initScript = '';

        $langSuffixes = array('');

        if ($this->isMultiLang) {
            foreach ($this->wire('languages') as $lang) {
                if ($lang->isDefault()) {
                    continue;
                }
                $langSuffixes[] = '__' . $lang->id;
            }
        }

        foreach ($langSuffixes as $langSuffix) {

            $property = 'inputMask' . str_replace('__', '', $langSuffix);
            $inputMask = $field->$property ? $field->$property : ($field->hasField ? $field->hasField->$property : false);

            if (strlen($inputMask)) {

                $maskConfig = $this->linestoArray($inputMask, false);

                $field->attr('has-inputmask', 1);
                $id = $field_base_id . $langSuffix;

                $maskConfigJson = '{' . implode(',', $maskConfig) . '}';
                $maskConfigJson = json_encode($maskConfigJson);

                $initScript .= "initInputMask('$id', $maskConfigJson);";
            }
        }

        if (strlen($initScript)) {
            $event->return .= "<script>$initScript</script>";
        }
    }

    public function addInputMaskConfigField(HookEvent $event)
    {
        // The field being edited
        $field = $event->object;

        // The inputfield wrapper
        $wrapper = $event->return;

        $f_before = $wrapper->getChildByName('showCount');

        if (!$f_before) {
            return;
        }

        $f = $this->wire('modules')->get('InputfieldTextarea');
        $f->attr('name', 'inputMask');
        $f->label = $this->_('Input Mask');
        $f->useLanguages = true;
        $f->collapsed = Inputfield::collapsedBlank;
        $f->value = $field->inputMask;

        if ($this->isMultiLang) {
            foreach ($this->wire('languages') as $lang) {
                if ($lang->isDefault()) {
                    continue;
                }
                $f->{'value' . $lang->id} = $field->{'inputMask' . $lang->id};
            }
        }

        $wrapper->insertBefore($f, $f_before);
    }

    public function pageListMarkupGetLangValue(HookEvent $event)
    {

        $page = $event->arguments('page');
        $pageLabelField = trim($page->template->pageLabelField);

        if (empty($pageLabelField)) {
            return false;
        }

        // {title}[em.company]{company_ref.title}[/em] [em]{%date_created.label%}: ({date_created}|date:%Y. %B %d.)[/em] [em][i]{%portfolio_images.label%}: {portfolio_images.count}[/i][/em]

        $multilangFieldRegex = "/%([a-zA-Z0-9_]+)\.([a-zA-Z0-9_]+)%/";

        $pageLabelField = utf8_encode($pageLabelField);

        $pageLabelField = preg_replace_callback($multilangFieldRegex, function ($match) use ($page) {

            $field = $match[1];
            $property = $match[2];

            $langID = $this->wire('user')->language->isDefault() ? '' : $this->wire('user')->language->id;

            if (strlen($page->fields->$field->{$property . $langID}) == 0) {
                $langID = '';
            }

            return str_replace('.' . $property, '.' . $property . $langID, 'fieldgroup.' . trim($match[0], '%'));

            //}, utf8_encode($pageLabelField));
        }, $pageLabelField);

        $page->template->pageLabelField = utf8_decode($pageLabelField);
    }

    public function addNavItems(HookEvent $event)
    {
        $items = '';
        $NavItems_pages = isset(self::$configData['NavItems_pages']) ? self::$configData['NavItems_pages'] : false;
        $NavItems_pages_submenu = isset(self::$configData['NavItems_pages_submenu']) ? self::$configData['NavItems_pages_submenu'] : false;
        $NavItems_custom = isset(self::$configData['NavItems_custom']) ? self::$configData['NavItems_custom'] : false;
        $rootUrl = $this->wire('pages')->get(2)->url . 'page/?id=';

        // process pagelist select items
        if ($NavItems_pages) {

            $isFirst = true;
            $superuserFlag = false;

            foreach ($this->pages->getById($NavItems_pages) as $p) {

                $url = 'javascript:';
                $editUrl = '';
                $activeClass = '';
                $inputId = $this->wire('input')->get->id;

                /**
                 * 7: Trash
                 * 21: Modules
                 * 304: Profile
                 */
                if ($p->id == 304) {

                    if ($this->wire('user')->hasPermission('profile-edit')) {
                        $url = $this->wire('pages')->get($p->id)->url;
                    } else {
                        continue;
                    }

                } else {
                    if ($p->id == 21) {

                        if ($this->wire('user')->isSuperuser()) {
                            $url = $this->config->urls->admin . 'module';
                        }

                    } else {
                        if ($p->id == 7) {

                            if ($p->listable()) {
                                $url = $this->config->urls->admin . 'page/?id=' . $p->id;
                                $editUrl = false;
                            } else {
                                continue;
                            }

                        } else {

                            if (!$p->listable()) {
                                continue;
                            }

                            $url = $rootUrl . $p->id;
                        }
                    }
                }

                if ($url == '') {
                    continue;

                } else {
                    $pageId = $p->id;

                    /**
                     * add active class only if:
                     * navItem id == GET id
                     * navItem id == current page id
                     * navItem id !== GET id and edited page is child page of the page
                     */

                    if (
                        $pageId == $inputId ||
                        $pageId == $this->page->id ||
                        (!in_array($inputId,
                            $NavItems_pages) && $pageId !== 1 && $this->editedPage && $this->editedPage->parent() && $pageId == $this->editedPage->parent()->id)
                    ) {
                        $activeClass = ' current';
                    }
                    $listUrl = '<a href="' . $url . '" class="page-list' . $activeClass . '">' . $p->title . '</a>';
                }

                $editUrl = ($editUrl === false) ? '' : $p->editable() ? '<a href="' . $p->editUrl() . '" class="page-edit"><i class="fa fa-pencil"></i></a>' : '';

                $firstClass = empty($items) ? ' first' : '';

                if ($isFirst && $NavItems_pages_submenu) {
                    $firstClass .= ' hasSubmenu';
                }

                $items .= '<li class="navItem' . $firstClass . '">';

                // start a submenu
                if ($isFirst && $NavItems_pages_submenu) {

                    // if title starts with "!" then only SuperUsers should see
                    if ($NavItems_pages_submenu[0] == '!') {
                        if (!$this->wire('user')->isSuperuser()) {
                            $superuserFlag = true;
                        }
                        // trim
                        $NavItems_pages_submenu = ltrim($NavItems_pages_submenu, '! ');
                    }

                    if (!$superuserFlag) {
                        $items .= '<a href="javascript:">' . $NavItems_pages_submenu . ' <i class="fa fa-caret-down"></i></a>';
                        $items .= '<ul>';
                        $items .= '<li>';
                    }

                    $isFirst = false;
                }

                if (!$superuserFlag) {
                    $items .= $listUrl . ' ' . $editUrl;
                    $items .= '</li>';
                }
            }

            // close the subenu
            if (!$superuserFlag && $NavItems_pages_submenu) {
                $items .= '</ul>';
            }

            $superuserFlag = false;
        }

        if ($NavItems_custom) {

            $settings = trim($NavItems_custom);
            $settings = explode("\n", $settings);
            $settings = array_filter($settings, 'trim');

            $rootUrl = rtrim($this->config->urls->admin, '/');
            $rootUrlHttp = $this->config->urls->httpAdmin;

            $superuserFlag = false;

            foreach ($settings as $pairs) {

                if (strpos($pairs, '//') === 0) {
                    continue;
                }

                // replace rootUrlHttp to avoid having ':' before explode
                $pairs = str_replace($rootUrlHttp, '', $pairs);

                // process submenus
                // start: --SubmenuName, end: --
                if (strpos($pairs, '--') === 0) {

                    if (strlen($pairs) > 2) {

                        $pairs = ltrim($pairs, '--');
                        $title = $pairs;
                        $url = '#';

                        // get submenu name and url if string contains ':'
                        if (strpos($pairs, ':') !== false) {
                            $setting = explode(':', $pairs);
                            $title = isset($setting[0]) ? trim($setting[0]) : $title;
                            $url = isset($setting[1]) ? trim($setting[1]) : $url;
                        }

                        // if title starts with "!" then only SuperUsers should see
                        if ($title[0] == '!') {
                            if (!$this->wire('user')->isSuperuser()) {
                                $superuserFlag = true;
                                continue;
                            }
                            // trim
                            $title = ltrim($title, '! ');
                        }

                        $items .= '<li class="navItem hasSubmenu">';
                        $items .= '<a href="' . $rootUrl . '/' . ltrim($url,
                            '/') . '">' . $title . ' <i class="fa fa-caret-down"></i></a>';
                        $items .= '<ul>';

                    } else {
                        // end tag
                        $items .= '</ul>';
                        $items .= '</li>';
                        $superuserFlag = false;
                    }
                    continue;
                }

                if (strpos($pairs, ':') === false) {
                    // perhaps it's a selector?
                    //                    $p = $this->wire('pages')->get(trim($pairs));
                    //                    if($p->id) {
                    //                        $pairs = $p->title . ':' . $this->wire('config')->urls->adminHttp . 'page/?id=' . $p->id;
                    //                    } else {
                    continue;
//                    }
                }

                if ($superuserFlag) {
                    continue;
                }

                $setting = explode(':', $pairs);

                $title = isset($setting[0]) ? trim($setting[0]) : null;
                $url = isset($setting[1]) ? trim($setting[1]) : null;

                if (is_null($title) || is_null($url)) {
                    continue;
                }

                // if title starts with "!" then only SuperUsers should see
                if ($title[0] == '!') {
                    if (!$this->wire('user')->isSuperuser()) {
                        continue;
                    }
                    // trim and add * to indicate it's admin only
                    $title = ltrim($title, '!') . '*';
                }

                $url = ltrim($url, '/');

                $activeClass = (strpos($_SERVER['REQUEST_URI'], $url) !== false) ? ' current' : '';

                $linkUrl = '<a href="' . $rootUrl . '/' . $url . '" class="page-list' . $activeClass . '">' . $title . '</a>';
                $items .= '<li class="navItem">' . $linkUrl . '</li>';
            }
        }

        if ($items == '') {
            return false;
        }

        $items = '<ul class="NavItems">' . $items . '</ul>';

        $event->return = str_replace('</body>', "<script>var navItemsHtml = '$items';</script></body>", $event->return);
    }

    /**
     * Add Delete button to pagelist
     */
    public function addDeleteButton(HookEvent $event)
    {
        $page = $event->arguments('page');

        if (!$this->wire('user')->isSuperuser()) {
            return false;
        }

        // do not allow for pages having children
        if ($page->numChildren > 0) {
            return false;
        }

        //  not trashable and not in Trash
        if (!$page->trashable() && !$page->isTrash()) {
            return false;
        }

        $actions = array();
        $adminUrl = $this->wire('config')->urls->admin . 'page/';
        $icon = '';

        $actions['delete'] = array(
            'cn' => 'Delete aos-pagelist-confirm',
            'name' => $icon . 'Delete',
            'url' => $adminUrl . '?action=delete&id=' . $page->id,
            'ajax' => true,
        );

        $event->return += $actions;
    }

    /**
     * Process action for addDeleteButton.
     *
     * @return bool
     */
    public function addDeleteButtonAction(HookEvent $event)
    {

        $page = $event->arguments(0);
        $action = $event->arguments(1);

        // do not allow for pages having children
        if ($page->numChildren > 0) {
            return false;
        }

        if ($action == 'delete') {

            //                            $page->setAndSave('title', $page->title . '-hello');
            $page->delete();

            $event->return = array(
                'action' => $action,
                'success' => true,
                'page' => $page->id,
                'updateItem' => $page->id,
                'message' => 'Page deleted.',
                'remove' => true,
                'refreshChildren' => false,
            );
        }
    }

    public function addDeletePermanentlyField(HookEvent $event)
    {
        if ($this->editedPage && !$this->editedPage->trashable()) {
            return false;
        }

        $form = $event->return;

        $trashConfirmField = $form->get('delete_page');

        if (!$trashConfirmField) {
            return false;
        }

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->attr('id+name', 'delete_permanently');
        $f->checkboxLabel = __('Delete Permanently', __FILE__);
        $f->label = __('Skip Trash?', __FILE__);
        $f->description = __('Check to permanently delete this page.', __FILE__);
        $f->value = '1';
//        $f->showIf = 'delete_page!=0';

        $trashConfirmField->columnWidth = 50;
        $f->columnWidth = 50;

        $f->collapsed = Inputfield::collapsedNever;
        $trashConfirmField->collapsed = Inputfield::collapsedNever;

        // add fieldset (Reno top spacing bug)
        if ($this->adminTheme === 'AdminThemeReno') {
            $fset = wire('modules')->get('InputfieldFieldset');
            $fset->add($trashConfirmField);
            $fset->add($f);
            $form->remove($trashConfirmField);
            $form->insertBefore($fset, $form->get('submit_delete'));
        } else {
            $form->insertAfter($f, $trashConfirmField);
        }
    }

    // delete page instead trashing if delete_permanently was checked
    public function addDeletePermanentlyHook(HookEvent $event)
    {
        if (isset($this->wire('input')->post->delete_permanently)) {

            $p = $event->arguments[0];
            $session = $this->wire('session');

            $afterDeleteRedirect = $this->wire('config')->urls->admin . "page/?open={$p->parent->id}";
            // if($this->wire('page')->process != $this->className()) $afterDeleteRedirect = "../";

            if ($p->deleteable()) {
                $session->message(sprintf(__('Deleted page: %s'), $p->url)); // Page deleted message
                $this->wire('pages')->delete($p, true);
                $session->redirect($afterDeleteRedirect);
            }
        }
    }

    // prepend sort=-sticky to pagelist find
    public function stickyFindMod(HookEvent $event)
    {
        $page = $event->arguments('page');
        $selectorString = $event->arguments('selectorString');
        $sortfield = $page->template->sortfield ?: $page->sortfield;

        $event->return = $page->children('sort=-sticky,sort=' . $sortfield . ',' . $selectorString);
    }

    /**
     * Add Sticky button to pagelist
     */
    public function addStickyButton(HookEvent $event)
    {
        // allow on ProcessPageList only
        if ($event->process != 'ProcessPageList') {
            return false;
        }

        $page = $event->arguments('page');

        if (in_array($page->id, array(1, 27), true)) {
            return false;
        }

        if ($page->isTrash()) {
            return false;
        }

        if ($page->template->flags && $page->template->flags === Template::flagSystem) {
            return false;
        }

        $actions = array();
        $adminUrl = $this->wire('config')->urls->admin . 'page/';
        $action = $page->sticky ? 'unsticky' : 'sticky';
        $cn = $page->sticky ? 'Unsticky' : 'Sticky';
        $icon = '';

        $actions[$action] = array(
            'cn' => $cn,
            'name' => $icon . $cn,
            'url' => $adminUrl . '?action=' . $action . '&id=' . $page->id,
            'ajax' => true,
        );

        $event->return = array_merge($actions, $event->return);
    }

    /**
     * Process action for addStickyButton.
     *
     * @return bool
     */
    public function addStickyButtonAction(HookEvent $event)
    {
        $page = $event->arguments(0);
        $action = $event->arguments(1);

        if ($action == 'sticky' || $action == 'unsticky') {

            if ($action == 'sticky') {
                $highestSticky = $page->parent->get('sticky!="", sort="-sticky, id!=' . $page->id);
                $page->sticky = (int) $highestSticky->sticky + 10;
                $message = 'Page made sticky';
            } else {
                $page->sticky = null;
                $message = 'Page unsticky';
            }

            $page->save('sticky', array('quiet' => true));

            $event->return = array(
                'action' => $action,
                'success' => true,
                'page' => $page->parent->id,
                'updateItem' => $page->id,
                'message' => $message,
                'remove' => false,
                'refreshChildren' => $page->parent->id,
            );
        }
    }

    public function addStickyPageLabelIcon(HookEvent $event)
    {
        $page = $event->arguments('page');

        if ($page->sticky) {
            $event->return = '&#9733; ' . $event->return;
        }
    }

    /**
     * Add Trash button to pagelist (for non-SuperUsers)
     */
    public function addTrashButton($event)
    {
        $page = $event->arguments(0);
        $extras = $event->return;
        if ($page->trashable()) {
            $trash_icon = "<i class='fa fa-trash-o'></i>&nbsp;";
            $extras['trash'] = array(
                'cn' => 'Trash aos-pagelist-confirm',
                'name' => $trash_icon . $this->_('Trash'),
                'url' => $this->wire('config')->urls->admin . "page/?action=trash&id=$page->id",
                'ajax' => true,
            );
        }
        $event->return = $extras;
    }

    /**
     * Return AJAX response for CKEditor Link Files plugin.
     *
     * @author Robin S., tpr
     *
     * @param HookEvent $event
     */
    public function CkeLinkFilesAjaxResponse(HookEvent $event)
    {
        // Must be AJAX request, must be from this module, must include pid GET variable
        if (!$this->wire('config')->ajax || $this->wire('input')->get->request !== 'AdminOnSteroids' || !$this->wire('input')->get->ckelinkfiles_pid) {
            return;
        }

        $page = $this->wire('pages')->get((int) $this->wire('input')->get->ckelinkfiles_pid);

        $event->replace = true;
        $event->cancelHooks = true;
        $result = array();
        $langIDs = array(''); // use empty for default language

        if ($this->isMultiLang) {
            foreach ($this->wire('languages') as $lang) {
                if (!$lang->isDefault()) {
                    $langIDs[] = $lang->id;
                }
            }
        }

        if ($page->editable) {
            foreach ($page->fields->find('type=FieldtypeFile') as $f) {
                foreach ($page->getUnformatted($f->name) as $file) {
                    foreach ($langIDs as $langID) {
                        $result[$langID][] = array(
                            'basename' => $file->basename,
                            'url' => $file->url,
                            'description' => $file->{'description' . $langID},
                        );
                    }
                }
            }
        }

        $event->return = json_encode($result);
    }

    /**
     * Mods to ProcessPageEdit for CKE Link Files plugin.
     *
     * @author Robin S., tpr
     *
     * @param HookEvent $event
     */
    public function CkeLinkFilesPageEditMods(HookEvent $event)
    {
        // Return if ProcessPageEdit is being loaded via AJAX (image field)
        if ($this->wire('config')->ajax) {
            return;
        }

        $page = $event->object->getPage();
        $out = $event->return;

        // Data to JS
        $this->wire('config')->js('CkeLinkFiles', array(
            'page_id' => $page->id,
            'all_files_text' => $this->_('Insert links to all files'),
            'no_files_text' => $this->_('No files on this page'),
        ));

        $event->return = $out;
    }

    public function addTemplateEditLinkPageList(HookEvent $event)
    {
        if (!isset(self::$configData['ListerTweaks_options'])) {
            return false;
        }

        // return if template edit action button is disabled for Lister
        if (in_array('hideTemplateEditAction', self::$configData['ListerTweaks_options']) &&
            ($this->page->process == 'ProcessPageLister' || $this->page->process == 'ProcessPageListerPro')
        ) {
            return false;
        }

        $page = $event->arguments('page');
        $actions = $event->return;
        $template = $page->template;

        $templateEditUrl = $this->config->urls->httpAdmin . 'setup/template/edit?id=' . $template->id;

        $editTemplateAction = array(
            'editTemplate' => array(
                // use "Edit" to enable built-in long-click feature
                'cn' => 'Edit',
                'name' => $template->name,
                'url' => $templateEditUrl,
            ),
        );

        // put the template edit action before the Extras (
        $key_extras = array_search('extras', array_keys($actions));

        // home, trash, etc doesn't have 'extras', add the button to the end
        if (!$key_extras) {
            $key_extras = count($actions);
        }

        $actions = array_merge(array_slice($actions, 0, $key_extras, true), $editTemplateAction,
            array_slice($actions, $key_extras, null, true));

        $event->return = $actions;
    }

    public function getFormattedOptionName($obj)
    {
        return !empty($obj->label) ? $obj->label . ' (' . $obj->name . ')' : $obj->name;
    }

    public function setupAdminColumnsTabs($fields, $form)
    {
        $dataColumnBreaks = array();

        foreach ($fields as $f) {

            // add data-attributes fo JS
            $notes = $f->notes;

            if (empty($notes)) {
                // try default notes (PW bug with overrides?)
                $notes = $this->fields->get($f->name)->notes;
            }

            if (!empty($notes)) {
                $notes = trim($notes);

                if (strpos($notes, 'colbreak_') !== 0) {
                    return;
                }

                $notes = str_replace('colbreak_', '', $notes);

                if (strpos($notes, ':') !== false) {
                    $notes = array_map('trim', explode(':', $notes));
                } else {
                    $notes = array($notes, 67);
                }
                $dataColumnBreaks[$f->name] = $notes;
            }
        }

        if (!empty($dataColumnBreaks)) {
            $form->wrapAttr('data-column-break', json_encode($dataColumnBreaks));
        }
    }

    public function addAdminClasses(HookEvent $event)
    {
        $theme = $event->object;
        $user = $this->wire('user');

        foreach ($user->roles as $role) {
            $theme->addBodyClass("role-{$role->name}");
        }

        if (!$this->wire('user')->isSuperuser()) {
            $theme->addBodyClass('role-nonsuperuser');
        }

        // add currently edited page info (template, id)
        //        if ($this->editedPage) {
        //            $theme->addBodyClass("template-" . $this->editedPage->template->name);
        //            $theme->addBodyClass("id-" . $this->editedPage->id);
        //        }
        $theme->addBodyClass("user-{$user->name}");
    }

    public function setupAdminColumns(HookEvent $event)
    {
        $form = $event->return;
        $fields = $form->children();
        $colBreakField = $fields->get('aos_column_break');
        $colWidths = array(67, 33);
        $tabOpenFields = $fields->find('hasFieldtype=FieldtypeFieldsetTabOpen');

        if ($tabOpenFields->count()) {
            $this->setupAdminColumnsTabs($tabOpenFields, $form);
        }

        if (!$colBreakField) {
            return false;
        }

        // stop if colBreakField is inside a tab
        $tabSeen = false;

        foreach ($fields as $field) {

            if ($field->hasFieldtype == 'FieldtypeFieldsetTabOpen') {
                $tabSeen = true;
            }

            if ($field->name == $colBreakField->name) {

                if ($tabSeen) {
                    // there was a TabOpen field first, remove colBreakField and stop
                    $form->remove($colBreakField);

                    return false;

                } else {
                    // colBreakField is not inside a tab
                    break;
                }
            }
        }

        if ($colBreakField->columnWidth) {
            $colWidths = array($colBreakField->columnWidth, 100 - $colBreakField->columnWidth);
        }

        $fsetLeft = $this->wire('modules')->get('InputfieldFieldset');
        $fsetLeft->attr('class', $fsetLeft->attr('class') . ' aos_col_left aos_no-inputfield-padding');
        $fsetLeft->set('themeBorder', 'none');
        $fsetLeft->set('themeOffset', false);
        $fsetLeft->wrapAttr('style', 'width: ' . $colWidths[0] . '%');
        $fsetLeft->wrapAttr('data-splitter-default', $colWidths[0]);

        $fsetRight = $this->wire('modules')->get('InputfieldFieldset');
        $fsetRight->set('themeBorder', 'none');
        $fsetRight->set('themeOffset', false);
        $fsetRight->attr('class', $fsetRight->attr('class') . ' aos_col_right aos_no-inputfield-padding');
        $fsetRight->wrapAttr('style', 'width: ' . $colWidths[1] . '%');
        $fsetRight->wrapAttr('data-splitter-default', $colWidths[1]);

        // add template name and user id for Split.js
        $fsetRight->wrapAttr('data-splitter-storagekey',
            'splitter_' . $this->editedPage->template->name . '_' . $this->wire('user')->id);

        $this->wire('modules')->get('FieldtypeFieldsetClose');
        if (class_exists('\ProcessWire\InputfieldFieldsetClose')) {
            $fsetLeftEnd = new \ProcessWire\InputfieldFieldsetClose;
            $fsetRightEnd = new \ProcessWire\InputfieldFieldsetClose;
        } else {
            $fsetLeftEnd = new InputfieldFieldsetClose;
            $fsetRightEnd = new InputfieldFieldsetClose;
        }

        $fsetLeftEnd->name = 'aos_col_left' . FieldtypeFieldsetOpen::fieldsetCloseIdentifier;
        $fsetRightEnd->name = 'aos_col_right' . FieldtypeFieldsetOpen::fieldsetCloseIdentifier;

        $fset = $fsetLeft;
        $rightItems = false;

        foreach ($fields as $f) {

            // stop on first Tab field
            if ($f->hasFieldtype == 'FieldtypeFieldsetTabOpen') {
                break;
            }

            // if colBreakField reached, remove it and start adding fields to the right column
            if (!$rightItems && $f == $colBreakField) {
                $form->remove($colBreakField);
                $fset = $fsetRight;
                $rightItems = true;
                continue;
            }

            $fset->add($form->get($f->name));
            $form->remove($form->get($f->name));
        }

        $form->add($fsetLeft);
        $form->add($fsetLeftEnd);

        $form->add($fsetRight);
        $form->add($fsetRightEnd);
    }

    public function moveStickyFieldToSettings(HookEvent $event)
    {
        $form = $event->return;
        $settingsTab = $form->children->get('id=ProcessPageEditSettings');
        $stickyField = $form->get('sticky');

        if ($stickyField && $settingsTab) {
            $form->remove($stickyField);
            $settingsTab->append($stickyField);
        }
    }

    /**
     * Override field settings per user/page/field poperties.
     *
     * @param HookEvent $event
     *
     * @return void
     */
    public function setFieldOverrides(HookEvent $event)
    {
        $field = $event->object;
        $user = $this->wire('user');
        $fields = $this->wire('fields');

        foreach ($this->FieldOverrides as $selector => $values) {

            // remove items with empty values
            array_filter($values, function ($v) {
                return $v !== '';
            });

            // check enabled state
            if (isset($values['?enabled'])) {
                if ($values['?enabled'] == 0) {
                    continue;
                }
                unset($values['?enabled']);
            }

            // check if user matches
            if (isset($values['?user'])) {
                // 1: try user role first
                // 2: try selector next
                $userrole = $values['?user'];
                unset($values['?user']);

                if (!($user->is('roles=' . $userrole) || ($this->isValidSelectorString($userrole) && $user->is($userrole)))) {
                    continue;
                }
            }

            // if "?field" key is present, check if current field matches
            if (isset($values['?field'])) {
                // 1: try field name first
                // 2: try a selector for the field

                $fieldname = $values['?field'];
                unset($values['?field']);

                if (!(($fields->get('name=' . $fieldname) && $field->name === $fieldname) || ($this->isValidSelectorString($fieldname) && in_array($field->id, array_values($fields->find($fieldname)->id()))))) {
                    continue;
                }
            }

            // check "?page" (id/selector for currently edited page)
            if (isset($values['?page'])) {
                $selector = $values['?page'];
                unset($values['?page']);

                if (is_numeric($selector)) {
                    $selector = 'id=' . $selector;
                }

                if ($this->editedPage && !$this->editedPage->is($selector)) {
                    continue;
                }
            }

            foreach ($values as $key => $v) {

                // check for _lang_{languageName}
                if ($this->isMultiLang) {
                    $lang_pos = strpos($key, '_lang_');
                    if ($lang_pos > 1) {
                        $language_name = mb_substr($key, $lang_pos + strlen('_lang_'));
                        $lang = $this->wire('languages')->get($language_name);
                        if ($lang->id) {
                            $key = mb_substr($key, 0, $lang_pos) . $lang->id;
                        } else {
                            continue;
                        }
                    }
                }

                switch ($key) {
                    case 'stop':
                        return; //do not process next ini group
                        break;
                    case 'toolbar_add':
                        $toolbar = $field->toolbar . ', ' . trim($v, ',');
                        $field->toolbar = $this->removeDuplicatesFromString($toolbar);
                        break;
                    case 'toolbar_remove':
                        $buttons = $this->removeDelimitedStringChunks($field->toolbar, $v);
                        $field->toolbar = $buttons;
                        break;
                    case 'formatTags':
                        $format_tags = str_replace(array(',', ' '), array(';', ''), $v);
                        $field->formatTags = $this->removeDuplicatesFromString($format_tags, ';');
                        break;
                    case 'formatTags_add':
                        $v = trim(str_replace(array(',', ' '), array(';', ''), $v), ';');
                        $format_tags = $field->formatTags . ';' . $v;
                        $field->formatTags = $this->removeDuplicatesFromString($format_tags, ';');
                        break;
                    case 'formatTags_remove':
                        $v = trim(str_replace(array(',', ' '), array(';', ''), $v), ';');
                        $format_tags = $this->removeDelimitedStringChunks($field->formatTags, $v, ';');
                        $field->formatTags = $format_tags;
                        break;
                    case 'id':
                    case 'name':
                    case 'type':
                    case 'inputfieldClass':
                        continue 2;
                        break;
                    default:
                        $field->{$key} = $v;
                }
            }

            continue; // move to next ini group
        }
    }

    /**
     * Check if string looks like a ProcessWire selector.
     *
     * @param $str
     *
     * @return bool
     */
    public function isValidSelectorString($str)
    {
        $validSelectorOperators = Selectors::getOperatorChars();

        return count(array_intersect(str_split($str), $validSelectorOperators)) > 0;
    }

    /**
     * Remove duplicate strings from a separated string.
     *
     * @param $str
     * @param string $delimiter
     *
     * @return string
     */
    public function removeDuplicatesFromString($str, $delimiter = ',')
    {
        return implode($delimiter, array_keys(array_flip(explode($delimiter, $str))));
    }

    /**
     * Remove string chunks from string.
     *
     * @param string $str       delimiter-separated string
     * @param string $substr    delimiter-separated string
     * @param string $delimiter chunks separator
     *
     * @return string
     */

    public function removeDelimitedStringChunks($str, $substr, $delimiter = ',')
    {
        $chunks = explode($delimiter, $str);
        $chunks_to_remove = explode($delimiter, $substr);

        if (!is_array($chunks) || !is_array($chunks_to_remove)) {
            return $str;
        }

        $chunks = array_map('trim', $chunks); //trim whitespace
        $chunks_to_remove = array_map('trim', $chunks_to_remove); //trim whitespace

        $out = array_diff($chunks, $chunks_to_remove);

        return implode($delimiter, $out);
    }

    public function addDownloadAssetLink(HookEvent $event)
    {
        $markup = $event->return;
        $url = $event->arguments[0]->url;

        $downloadLink = '<a href="' . $url . '" target="_blank" class="aos_downloadAsset" download title="' . __('Download',
            __FILE__) . '"><i class="fa fa-download"></i></a>';

        if (strpos($markup, 'InputfieldImageEdit') !== false) {
            // for image fields
            $markup = str_replace('</h2>', $downloadLink . '</h2>', $markup);
        } else {
            // for file fields
            $markup = $downloadLink . $markup;
        }

        $event->return = $markup;
    }

    public function addMoveAssetButtons(HookEvent $event)
    {

        $markup = '<span class="aos_moveAssets">';
        $markup .= '<i title="' . __('Move to last', __FILE__) . '" class="fa fa-step-backward" data-down></i>';
        $markup .= '<i title="' . __('Move to first', __FILE__) . '" class="fa fa-step-forward" data-up></i>';
        $markup .= '</span>';

        $event->return = $markup . $event->return;
    }

    public function addAOSToggleLink(HookEvent $event)
    {

        $parts = $event->return;

        $div_class = ($this->wire('config')->defaultAdminTheme === 'AdminThemeUikit') ? 'pw-container uk-container uk-container-expand' : '';

        $enabledText = __('Disable', __FILE__) . ' AdminOnSteroids';
        $disabledText = __('Enable', __FILE__) . ' AdminOnSteroids';

        $linkStyle = 'style="opacity: 0.75; color: inherit !important; margin-left: 0; display: inline-block; padding: 4px 0; margin-right: 1px;"';
        $mouseover = 'onmouseover="this.style.textDecoration=\'underline\'" onmouseout="this.style.textDecoration=\'none\'"';

        $modulePage = $this->config->urls->admin . 'module/edit?name=AdminOnSteroids';
        $configLink = '<a href="' . $modulePage . '" ' . $linkStyle . ' title="' . __('Configure module',
            __FILE__) . '"><i class="fa fa-cog"></i></a>';

        $configLinkMarkup = '<div class="' . $div_class . '">
<div class="uk-grid"><div class="uk-width-2-3@m uk-flex-first@m uk-text-center uk-text-left@m uk-first-column"><p style="margin-top: 10px; font-size: 0.9rem;" class="">
<a href="' . $modulePage . '&toggle=1" class="aos_toggle" ' . $linkStyle . '><i class="fa fa-medkit"></i> <span ' . $mouseover . '>
' . ($this->enabled ? $enabledText : $disabledText) . '</span></a> ' . $configLink . '</p></div></div></div>';

        $parts['footer'] .= $configLinkMarkup;

        $event->return = $parts;
    }

    public function addTemplateEditLink(HookEvent $event)
    {
        if (!$this->editedPage || $this->editedPage->template == 'admin') {
            return;
        }

        $template = $this->editedPage->template;

        $target = isset(self::$configData['FieldAndTemplateEditLinks']) ? self::$configData['FieldAndTemplateEditLinks'] : '';

        $target = ($target === 'pw-panel') ? $target . ' pw-panel-reload' : $target;

        $templateEditUrl = $this->config->urls->admin . 'setup/template/edit?id=' . $template->id;
        $templateEditLink = '<a href="' . $templateEditUrl . '" class="aos_EditTemplate ' . $target . '" target="_blank">' . $template->name . '<i class="fa fa-pencil"></i></a>';

        if ($this->adminTheme === 'AdminThemeDefault') {
            $event->return = str_replace('<li class=\'title\'>', '<li class="title">' . $templateEditLink, $event->return);
        } else {
            if ($this->adminTheme === 'AdminThemeUikit') {
                $event->return = str_replace('<h1 class=\'uk-margin-remove-top\'>', '<h1 id="title" class="uk-margin-remove-top">' . $templateEditLink, $event->return);
            } else {
                // todo check for AdminThemeUikit
                $event->return = preg_replace('/<h1 id="title">(<span>)?(.*)(<\/span>)?<\/h1>/', '<h1 id="title"><span>${2}</span>' . $templateEditLink . '</h1>', $event->return, 1);
            }
        }
    }

    public function addFieldEditLinks(HookEvent $event)
    {
        $inputfield = $event->object;

        if ($inputfield->type === 'hidden') {
            return;
        }

        $markup = $event->return;

        if (strpos($markup, 'data-editurl')) {
            return;
        }

        if ($field = $inputfield->hasField) {

            if (!is_object($field)) {
                return;
            }

            if ($field->flags && $field->hasFlag(Field::flagSystem) && $field->name !== 'title') {
                return;
            }
            

            // add class to wrapper to be able to use :hover even if label is unavailable (eg. checkbox field)
            $inputfield->wrapAttr('class', $inputfield->wrapAttr('class') . ' aos_hasTooltip');

            $editFieldUrl = $this->wire('config')->urls->admin . 'setup/field/edit?id=' . $field->id;

            $editFieldTooltip = '<em class="aos_EditField" data-for-field="' . $field->id . '">' . $field->name . '<i class="fa fa-pencil"></i></em>';

            // need to allow HTML in label
            $inputfield->entityEncodeLabel = false;
            $inputfield->label = '<span class="title">' . $editFieldTooltip . $inputfield->label . '</span>';

            // add tooltip if there's no label (checkbox)
            if ($inputfield instanceof InputfieldCheckbox) {
                $markup = str_replace('</label>', $editFieldTooltip . '</label>', $markup);
            }

            // use hidden link to be able to use modal/panel
            // note: link is not added to the label tag because it won't be clickable

            $link = '';

            // for multi-select page reference fields $link was added twice (#96)
            // for repeaters $markup contains all included fields' $links (#101)
            if (strpos($markup, 'aos_EditFieldLink') === false || $inputfield instanceof InputfieldRepeater) {
                $target = isset(self::$configData['FieldAndTemplateEditLinks']) ? self::$configData['FieldAndTemplateEditLinks'] : '';
                $target = ($target === 'pw-panel') ? $target . ' pw-panel-reload' : $target;

                $link = '<a href="' . $editFieldUrl . '" class="' . $target . ' aos_EditFieldLink" data-field-id="' . $field->id . '" target="_blank" style="display: none !important;">Edit</a>';
            }

            $event->return = $markup . $link;
        }
    }

    public function addTranslatorLinks(HookEvent $event)
    {
        $form = $event->return;
        $textdomain = $this->wire('input')->get('textdomain');
        $currentLangID = $this->wire('input')->get('language_id');
        $links = '';
        $adminUrl = $this->wire('urls')->admin;
        $modalParam = wire('input')->get('modal') === '1' ? '&modal=1' : '';
        $translatorLinksIntro = '<p class="aos-language-translator-intro">' . __('Translate to other languages', __FILE__) . ':</p>';

        foreach ($this->wire('languages') as $lang) {
            $lang_id = $lang->id;
            if ($lang_id == $currentLangID)     continue;

            $translator = new LanguageTranslator($lang);
            $file = $translator->textdomainToFilename($textdomain);

            if ($file) {
                $links .= '<li><a href="' . $adminUrl . 'setup/language-translator/edit/?textdomain=' . $textdomain . '&language_id=' . $lang_id . $modalParam . '" title="' . $lang->name . '">' . $lang->title . '</a></li>';
            }
        }

        if(strlen($links)) {
            $links = '<ul class="aos-language-translator-links">' . $links . '</ul>';
        } else {
            $links = '<p class="aos-language-translator-links-none"><em>' . __('Unable to load textdomain for other languages.', __FILE__) . '</em></p>';
        }
        $event->return = str_replace('</h2>', '</h2>' . $translatorLinksIntro . $links, $form);
    }

    public function addPageListUnselectButtons(HookEvent $event)
    {
        $field = $event->object;

        $originalID = '';
        $originalTitle = ($field->value && $this->pages->get($field->value)) ? $this->pages->get($field->value)->title : '';

        if (isset($this->PageListTweaks) && in_array('pListIDs', $this->PageListTweaks) && $this->wire('user')->isSuperuser()) {
            $originalID = ($field->value && $this->pages->get($field->value)) ? $this->pages->get($field->value)->id : '';
        }

        $restoreTitleTag = strlen($originalTitle) ? 'title="' . __('Restore',
            __FILE__) . ' &quot;' . $originalTitle . '&quot;"' : '';

        $clearButton = '<button class="aos_pagelist_unselect clear ui-button ' . ($field->value ? '' : 'empty') . '" title="' . __('Clear',
            __FILE__) . '"><i class="fa fa-times-circle"></i></button>';

        $restoreButton = $field->value ? '<button class="aos_pagelist_unselect restore ui-button initial" ' . $restoreTitleTag . ' data-title-original="' . $originalTitle . '" data-pid="' . $originalID . '" data-value-original="' . $field->value . '" ><i class="fa fa-undo"></i></button>' : '';

        $event->return = $restoreButton . $clearButton . $event->return;
    }

    public function addIUCLink(HookEvent $event)
    {

        $inputfield = $event->object;
        $url = $inputfield->value ? $inputfield->value : '';

        // do not add to regular autocomplete field, only to edit link modal
        if ($inputfield instanceof InputfieldPageAutocomplete) {
            return false;
        }

        // if url is an array, it's a simple pageautocomplete field (not FieldtypeAssistedURL)
        // https://github.com/rolandtoth/AdminOnSteroids/issues/13
        if (is_array($url)) {
            return false;
        }

        $configData = self::$configData;
        $editedPage = $this->editedPage;
        $editLinkAttrsArray = array();
        $editLinkAttrs = '';

        if(!$this->editedPage) {
            return false;
        }

        if (!empty($configData['IUC_enabledTemplates']) && !in_array($editedPage->template->name, $configData['IUC_enabledTemplates'], true)) {
            return false;
        }

        if (!empty($configData['IUC_enabledFields']) && !in_array($inputfield->name, $configData['IUC_enabledFields'], true)) {
            return false;
        }

        // process locked fields
        if (in_array($inputfield->collapsed, array(7, 8), true)) {
            $target = isset($configData['IUC_target']) ? $configData['IUC_target'] : '';
            $target = ($target === 'pw-panel') ? $target . ' pw-panel-reload' : $target;
            $event->return = '<a href="' . $event->return . '" target="_blank" class="iuc iuc-locked-link ' . $target . '">' . $event->return . '</a>';

            return true;
        }

        if (isset($configData['IUC_mode'])) {

            $mode = implode(',', $configData['IUC_mode']);

            $editLinkAttrsArray['data-iuc-mode'][] = $mode;

            if (in_array('button', $configData['IUC_mode'], true)) {
                $buttonPosition = isset($configData['IUC_buttonPosition']) ? $configData['IUC_buttonPosition'] : '';
                $editLinkAttrsArray['class'][] = 'iuc iuc-button ' . $buttonPosition;
            } else {
                $editLinkAttrsArray['class'][] = 'iuc iuc-hidden';
            }
        }

        if (isset($configData['IUC_target'])) {

            // add wrap class for repeaters (only if mode is pw-panel)
            if ($configData['IUC_target'] === 'pw-panel' && strpos($inputfield->attr('id'), '_repeater') !== false) {
                $inputfield->wrapAttr('class', $inputfield->wrapAttr('class') . ' pw-panel-items');
            }

            $editLinkAttrsArray['class'][] = $configData['IUC_target'];

            if ($configData['IUC_target'] === 'pw-panel') {
                // disable load on hover
                $editLinkAttrsArray['class'][] = 'pw-panel-reload';
            }
        }

        if (isset($configData['IUC_forceHttp']) && $configData['IUC_forceHttp'] === 1) {
            $editLinkAttrsArray['data-iuc-force-http'][] = 1;
        }

        foreach ($editLinkAttrsArray as $attr_name => $values) {
            $editLinkAttrs .= $attr_name . '="' . implode(' ', $values) . '" ';
        }

        // add CSS class for easier selection
        $inputfield->addClass('iuc-input');

        $editLinkMarkup = '<a href="' . $url . '"' . $editLinkAttrs . ' target="_blank"><i class="fa fa-arrow-right"></i></a>';

        $event->return = $editLinkMarkup . $event->return;

        return false;
    }

// add template name to title
    public function addTemplateLinkPageList(HookEvent $event)
    {
        $page = $event->arguments('page');

        $template = $page->template;

        $target = isset(self::$configData['FieldAndTemplateEditLinks']) ? self::$configData['FieldAndTemplateEditLinks'] : '';

        $target = ($target === 'pw-panel') ? $target . ' pw-panel-reload' : $target;

        $templateEditUrl = $this->config->urls->admin . 'setup/template/edit?id=' . $template->id;
        $templateEditLink = '<a href="' . $templateEditUrl . '" class="aos_EditTemplate ' . $target . '" target="_blank">' . $template->name . '<i class="fa fa-pencil"></i></a>';

        $event->return = str_replace('</span>', $templateEditLink . '</span>', $event->return);
    }

    public function replacePageListIconUnderscores(HookEvent $event)
    {
        $event->return = str_replace('___', ' ', $event->return);
    }

    public function addPageListIcon(HookEvent $event)
    {

        $page = $event->arguments[0];
        $template = $page->template;

        // intentional "="
        if (!($settings = $this->getTextareaPairs('PageListIcons'))) {
            return false;
        }

        if (!is_array($settings)) {
            return false;
        }

        foreach ($settings as $pairs) {

            if (strpos($pairs, '//') === 0) {
                continue;
            }

            $setting = explode(':', $pairs);

            $customIcon = isset($setting[0]) ? trim($setting[0]) : null;
            $selector = isset($setting[1]) ? trim($setting[1]) : null;

            // save original icon to session
            $sessionIconName = 'icon_orig_' . $template->id;
            $currentIcon = $template->getIcon();

            if (strpos($currentIcon, 'icon_orig_') === 0) {
                $this->wire('session')->set($sessionIconName, $currentIcon);
            }

            // if only a string is supplied without "=" in it, consider it as a template
            // eg. cirle-o: basic-page matches other items too - use template=basic-page (maybe because common fieldgroup?)
            if (is_string($selector) && strpos($selector, '=') === 0) {
                $selector = 'template=' . $selector;
            }

            if ($page->is($selector) || $page->matches($selector)) {
                $template->setIcon($customIcon);
            }
        }
    }

    public function addPageListThumb(HookEvent $event)
    {
        // disable in Tree menu (wide items may go blank because the ellipsis added by PW)
        // bug: causes thumbs not loaded if tree was initially collapsed
        //        if ($this->wire('config')->ajax) return false;
        // this works fine:
        $options = $event->arguments('options');
        if (!empty($options['noTags'])) {
            return;
        }

        $page = $event->arguments('page');
        $field = null;

        // intentional "="
        //        if (!($settings = $this->getTextareaPairs('PageListThumbs_options', 'PageListThumbs_items'))) return false;

        if (!($settings = $this->getTextareaPairs('PageListThumbs_items'))) {
            return false;
        }

        if (!is_array($settings)) {
            return false;
        }

        foreach ($settings as $pairs) {

            if (strpos($pairs, '//') === 0) {
                continue;
            }

            $setting = explode(':', $pairs);

            $f = isset($setting[0]) ? trim($setting[0]) : null;
            $selector = isset($setting[1]) ? trim($setting[1]) : null;

            if (is_null($f) || !$page->$f || (!$page->$f instanceof Pageimage && !$page->$f instanceof Pageimages) || count($page->$f) == 0) {
                continue;
            }

            if (is_null($selector)) {
                // break if there's no selector (any page will match)
                $field = $f;
                break;

            } elseif ($page->is($selector)) {
                // break if page matches
                $field = $f;
                break;
            }
        }

        if (is_null($field)) {
            return false;
        }

        $field = ($page->$field instanceof Pageimages) ? $page->$field->first() : $page->$field;

        $classes = array('addlink');

        // always use 48px to avoid generation too much thumbs, resize with CSS
        $thumbSize = 48;

        if (isset($this->PageListThumbs_style) && !empty($this->PageListThumbs_style)) {
            $classes[] = $this->PageListThumbs_style;
        }

        if (in_array('square', $classes)) {
//                $thumbSrc = $field->size($thumbSize, $thumbSize, array('cropping' => false))->url;
            $thumbSrc = $field->size($thumbSize, $thumbSize, array('cropping' => true, 'upscaling' => true))->url;
//                $thumbSrc = $field->size($thumbSize, $thumbSize, array('cropping' => true, 'forceNew' => true))->url;
        } else {
            $thumbSrc = $field->height($thumbSize)->url;
        }

        $PageListThumbs_options = isset($this->PageListThumbs_options) ? $this->PageListThumbs_options : null;

        $img = '<img src="' . $thumbSrc . '" />';

        if (!is_null($PageListThumbs_options)) {

            if (in_array('alignright', $PageListThumbs_options)) {
                $classes[] = 'alignright';
            }

            $img = '<a href="' . rtrim($this->config->urls->httpRoot,
                '/') . $page->editUrl() . '" class="aos_pageListLink">' . $img . '</a>';
        }

        if (!empty($classes)) {
            $classes = implode(' ', $classes);
        }

        $event->return = '<figure class="' . $classes . '">' . $img . '</figure>' . $event->return;
    }

    public function getTextareaPairs($propertyName)
    {

        if ($this->{$propertyName}) {
            return $this->{$propertyName};
        }

        $data = isset($this->data[$propertyName]) ? $this->data[$propertyName] : null;

        if (is_null($data)) {
            return false;
        }

        // build settings array
        $settings = $this->linestoArray($data);
        $this->{$propertyName} = $settings;

        return $settings;
    }

    public function linestoArray($lines)
    {
        $data = trim($lines);
        $data = explode("\n", $data);
        $data = array_map('trim', $data); //trim whitespace
        $data = array_filter($data, 'trim'); // remove empty lines

        // remove comments
        $dataCount = count($data);

        for ($i = 0; $i < $dataCount; $i++) {
            if (strpos($data[$i], '//') === 0) {
                unset($data[$i]);
            }
        }

        return $data;
    }

    public function addAdminLangSwitcher(HookEvent $event)
    {

        if ($this->isMultiLang && $this->languageCount > 1) {

            $parts = $event->return;

            $lang_items = '';
            $userLangId = $this->wire('user')->language->id;

            foreach ($this->wire('languages') as $lang) {
                $activeClass = $lang->id == $userLangId ? ' class="active"' : '';
                $lang_items .= '<li' . $activeClass . '><a href="' . $_SERVER['REQUEST_URI'] . '" data-lang-id="' . $lang->id . '"><span class="lang-title">' . $lang->title . '</span> <span class="lang-name">' . $lang->name . '</span></a></li>';
            }

            $parts['masthead'] .= '<li class="aos_adminLangSwitcher" style="display: none;"><a href="#">' . $this->wire('user')->language->title . '</a><ul>' . $lang_items . '</ul></li>';

            $event->return = $parts;
        }
    }

    public function addRoleFields($submoduleName, $data, $parent)
    {
        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->attr('name', $submoduleName . 'Roles');
        $f->label = __($submoduleName . ' roles', __FILE__);
        $f->skipLabel = Inputfield::skipLabelHeader;
        $f->attr('data-no-asm-searchbox', '1');
        $f->attr('asmPlaceholder', __('ROLES', __FILE__));
        $f->showIf = 'enabledSubmodules=' . $submoduleName;
        $f->setAsmSelectOption('sortable', false);
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOptions($this->allRoles);

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        }

        $parent->add($f);
    }

    public function isOnPageEditScreen()
    {
        return $this->wire('input') && strpos($this->wire('input')->url, '/page/edit/') !== false && isset($this->wire('input')->id);
    }

    public function getModuleConfigInputfields(array $data)
    {

        $defaultData = self::getDefaultData();
        $data = array_merge(self::getDefaultData(), $data);

        // remove  "Force showing system templates" tweak if it's unchecked when saving AOS
        $this->wire('modules')->addHookBefore('saveModuleConfigData', function () use ($data) {
            if (in_array('showSystemTemplates', $data['Misc'])) {
                $this->wire('session')->remove('ProcessTemplateFilterSystem');
            }
        });

        // exception to ListerTweaks: use "[DEFAULTS]" if empty
        //        if (empty($data['ListerTweaks_find'])) {
        //            $data['ListerTweaks_find'] = array('[DEFAULTS]');
        //        }
        //        if (empty($data['ListerTweaks_users'])) {
        //            $data['ListerTweaks_users'] = array('[DEFAULTS]');
        //        }

        $wrapper = new InputfieldWrapper();

        // Enable module ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->name = 'enabled';
        $f->label = __('Enable module', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->attr('value', $data[$f->name]);

        $f->checked = ($f->value == 1) ? 'checked' : '';

        $wrapper->add($f);

        // Submodules ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'enabledSubmodules');
        $f->label = __('Submodules', __FILE__);
        $f->wrapAttr('data-no-checkall-checkboxes', '1');
        $f->collapsed = Inputfield::collapsedNever;

        $intro = __('Click on the boxes to enable or disable submodules. Use the "cog" icon to jump to their configuration section.', __FILE__);
        $markupText = __('More info', __FILE__);

        $f->prependMarkup = <<< HTML
     <p>$intro $markupText: <a href="https://github.com/rolandtoth/AdminOnSteroids/wiki" target="_blank">AdminOnSteroids @ GitHub</a>
</p>
HTML;

        $f->addOption('AddNewChildFirst',
            '**AddNewChildFirst**' . __('Add new page as first child instead of last', __FILE__));
        $f->addOption('AdminTweaks', '**AdminTweaks**' . __('Default admin theme tweaks', __FILE__));
        $f->addOption('AsmTweaks', '**AsmTweaks**' . __('asmSelect tweaks', __FILE__));
        $f->addOption('CKEaddons', '**CKEaddons**' . __('Autoload CKEditor plugins and skins', __FILE__));
        $f->addOption('DeselectRadios', '**DeselectRadios**' . __('Enable clearing checked radio buttons', __FILE__));
        $f->addOption('FieldAndTemplateEditLinks',
            '**FieldAndTemplateEditLinks**' . __('Shortcuts to templates and fields&nbsp;(SuperUser only)', __FILE__));
        $f->addOption('FieldOverrides', '**FieldOverrides**' . __('Conditionally override field settings', __FILE__));
        $f->addOption('FileFieldTweaks', '**FileFieldTweaks**' . __('File and image field enhancements', __FILE__));
        $f->addOption('FocusInputOnLangTabSwitch',
            '**FocusInputOnLangTabSwitch**' . __('Focus input on switching language tabs', __FILE__));
        $f->addOption('Hotkeys', '**Hotkeys**' . __('Hotkey tweaks', __FILE__));
        $f->addOption('InputfieldURLChecker',
            '**InputfieldURLChecker**' . __('Add button or hotkey to check URL', __FILE__));
        $f->addOption('LongClickDuration', '**LongClickDuration**' . __('Custom long-click action duration', __FILE__));
        $f->addOption('ListerTweaks', '**ListerTweaks**' . __('Lister enhancements', __FILE__));
        $f->addOption('Misc', '**Misc**' . __('Miscellaneous tweaks', __FILE__));
        $f->addOption('ModuleTweaks', '**ModuleTweaks**' . __('Module related tweaks (SuperUser only)', __FILE__));
        $f->addOption('NavItems', '**NavItems**' . __('Add pages to navigation', __FILE__));
        $f->addOption('PageListIcons', '**PageListIcons**' . __('Add pagelist icons', __FILE__));
        $f->addOption('PageListThumbs', '**PageListThumbs**' . __('Add pagelist thumbnails', __FILE__));
        $f->addOption('PageListTweaks', '**PageListTweaks**' . __('Pagelist related tweaks', __FILE__));
        $f->addOption('PagePreviewBtn', '**PagePreviewBtn**' . __('Add preview link next to page title', __FILE__));
        $f->addOption('RenoTweaks', '**RenoTweaks**' . __('Reno admin theme tweaks', __FILE__));
        $f->addOption('RestrictTreeDropdown', '**RestrictTreeDropdown**' . __('Hide tree dropdown by role', __FILE__));
        $f->addOption('Tooltips', '**Tooltips**' . __('Move field descriptions and notes to tooltips', __FILE__));
        $f->addOption('UikitTweaks', '**UikitTweaks**' . __('Uikit admin theme tweaks', __FILE__));

        $f->attr('value', isset($data[$f->name]) ? $data[$f->name] : $defaultData[$f->name]);

        $wrapper->add($f);

        // Tweaks Fieldset ----------------------------------------------- //

        $fset = wire('modules')->get('InputfieldFieldset');
        $fset->attr('name', 'tweaks');
        $fset->label = __('Submodule options', __FILE__);
        $fset->collapsed = Inputfield::collapsedNever;

        // AddNewChildFirst ----------------------------------------------- //

        $fsetANCF = wire('modules')->get('InputfieldFieldset');
        $fsetANCF->attr('name', 'AddNewChildFirst');
        $fsetANCF->label = __('AddNewChildFirst', __FILE__);
        $fsetANCF->showIf = 'enabledSubmodules=AddNewChildFirst';

        // Enabled templates
        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'AddNewChildFirst_enabledTemplates';
        $f->label = __('Enabled templates', __FILE__);
        $f->attr('asmPlaceholder', __('Add templates...', __FILE__));
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('__all__', '[ALL]');

        foreach ($this->wire('templates') as $t) {
            if ($t->name == 'home' || ($t->flags && $t->flags === Template::flagSystem)) {
                continue;
            }
            $f->addOption($t->name, self::getFormattedOptionName($t));
        }

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetANCF->add($f);

        $fset->add($fsetANCF);

        // AdminTweaks ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'AdminTweaks');
        $f->label = __('AdminTweaks', __FILE__);
        $f->showIf = 'enabledSubmodules=AdminTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('headSticky', __('Sticky header', __FILE__));
        $f->addOption('wide', __('Set wider main content', __FILE__));
        $f->addOption('leftTopnav', __('Align top menu to the left', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // AsmTweaks ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'AsmTweaks');
        $f->showIf = 'enabledSubmodules=AsmTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('asmCollapse', __('Collapse fieldset/tab items on double click', __FILE__));
        $f->addOption('asmLeftX', __('Move delete button to the left', __FILE__));
        $f->addOption('fieldMiddleEdit', __('Edit field in new tab on middle click (no template context)', __FILE__));
        $f->addOption('editFieldWidth', __('Template editor: add clickable field width percentages and display divisions on width slider',
            __FILE__));
        $f->addOption('asmLimit', __('Add limit to asmSelect', __FILE__));
        $f->addOption('asmPlaceholder', __('Add placeholder to asmSelect', __FILE__));
        $f->addOption('asmSearchBox', __('Add search box to asmSelect', __FILE__));
        $f->addOption('asmSearchBoxKeepListOpen', __('Keep list open after select', __FILE__));
        $f->addOption('asmSearchBoxKeepTerm', __('Keep search term after select', __FILE__));
        $f->addOption('asmCounter', __('Add counter to asmSelect', __FILE__));
        $f->addOption('asmShowFieldTypes', __('Show field types after name (for Fields asmSelect)', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // CKEaddons ----------------------------------------------- //

        $fsetCKE = wire('modules')->get('InputfieldFieldset');
        $fsetCKE->attr('name', 'CKEaddons');
        $fsetCKE->label = __('CKEaddons', __FILE__);
        $fsetCKE->showIf = 'enabledSubmodules=CKEaddons';
//        $fsetCKE->collapsed = Inputfield::collapsedNever;

        // Plugins
        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'CKEaddons_plugins';
        $f->label = __('Plugins', __FILE__);
        $f->description = __('Plugins marked with asterisk add toolbar items.', __FILE__);
        $f->attr('asmPlaceholder', __('Select plugins...', __FILE__));
//        $f->attr('asmLimit', 3);
        $f->collapsed = Inputfield::collapsedNever;

        $hasToolbarBtn = '*';

        $f->addOption('autogrow', 'Auto Grow');
        $f->addOption('autolink', 'Auto Link');
        $f->addOption('autosave', 'Auto Save');
        $f->addOption('linkfilesmenu', 'Link Files Menu' . $hasToolbarBtn);
        $f->addOption('linkhover', 'Link Hover');
        $f->addOption('codemirror', 'CodeMirror');
        $f->addOption('codesnippet', 'Code Snippet');
        $f->addOption('templates', 'Content Templates');
        $f->addOption('div', 'Div' . $hasToolbarBtn);
        $f->addOption('find', 'Find' . $hasToolbarBtn);
        $f->addOption('indentblock', 'Indent Block' . $hasToolbarBtn);
        $f->addOption('justify', 'Justify' . $hasToolbarBtn);
        $f->addOption('textselection', 'Keep TextSelection');
        $f->addOption('keystrokes', 'Keystrokes');
        $f->addOption('magicline', 'Magic Line');
        $f->addOption('mathjax', 'Mathjax' . $hasToolbarBtn);
        $f->addOption('maximize', 'Maximize' . $hasToolbarBtn);
        $f->addOption('oembed', 'Media (oEmbed)' . $hasToolbarBtn);
        $f->addOption('openlink', 'Open Link');
        $f->addOption('showblocks', 'Show Blocks' . $hasToolbarBtn);
        $f->addOption('smallerselection', 'Smaller Selection');
        $f->addOption('token', 'Token' . $hasToolbarBtn);
        $f->addOption('wordcount', 'WordCount');

        if (isset($data[$f->name]) && $data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCKE->add($f);

        // Enabled fields
        $cke_fields = $this->fields->find('inputfieldClass=InputfieldCKEditor');

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'CKEaddons_enabledFields';
        $f->label = __('Enabled fields&nbsp;(for plugins only)', __FILE__);
//        $f->description = __('Note: selected fields will restrict plugins only and not the skin.', __FILE__);
        $f->attr('asmPlaceholder', __('Add fields...', __FILE__));
        $f->collapsed = Inputfield::collapsedNever;
        $f->columnWidth = 66;

        foreach ($cke_fields as $cke_field) {
            $f->addOption($cke_field->name, self::getFormattedOptionName($cke_field));
        }

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCKE->add($f);

        // Skin
        $f = wire('modules')->get('InputfieldRadios');
        $f->name = 'CKEaddons_skin';
        $f->label = __('CKEditor skin', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->optionColumns = 3;

        $f->addOption('default', 'default');
        $f->addOption('lightwire', 'LightWire');

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCKE->add($f);

        $fset->add($fsetCKE);

        // ListerTweaks ----------------------------------------------- //

        // system labels + id, path
        $extraFieldNames = array(
            'id',
            'name',
            'path',
            'status',
            'template',
            'templates_id',
            'modified',
            'created',
            'published',
            'modified_users_id',
            'created_users_id',
            'parent',
            'num_children',
        );

        $fsetLT = wire('modules')->get('InputfieldFieldset');
        $fsetLT->attr('name', 'ListerTweaks');
        $fsetLT->label = __('ListerTweaks', __FILE__);
        $fsetLT->showIf = 'enabledSubmodules=ListerTweaks';

        // Find lister

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'ListerTweaks_find';
        $f->label = __('Find lister columns', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->attr('asmPlaceholder', __('Add fields...', __FILE__));

        $lister_fieldnames = $this->wire('fields')->find('type!=FieldtypeFieldsetOpen|FieldtypeFieldsetClose|FieldtypeFieldsetTabOpen|FieldtypeFieldsetTabClose, sort=label')->name();
        $lister_fieldnames = array_merge($lister_fieldnames, $extraFieldNames);
        natcasesort($lister_fieldnames);

        array_unshift($lister_fieldnames, '[DEFAULTS]');

        foreach ($lister_fieldnames as $fieldname) {
            $f->addOption($fieldname);
        }

        $f->attr('value', (isset($data[$f->name]) && $data[$f->name]) ? $data[$f->name] : '');

        $fsetLT->add($f);

        $fset->add($fsetLT);

        // User lister

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'ListerTweaks_users';
        $f->label = __('Users lister columns', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->attr('asmPlaceholder', __('Add fields...', __FILE__));

        $lister_fieldnames = $this->wire('templates')->get('user')->fields->find('name!=pass, sort=label')->name();
        $lister_fieldnames = array_merge($lister_fieldnames, $extraFieldNames);
        natcasesort($lister_fieldnames);

        array_unshift($lister_fieldnames, '[DEFAULTS]');

        foreach ($lister_fieldnames as $fieldname) {
            $f->addOption($fieldname);
        }

        $f->attr('value', (isset($data[$f->name]) && $data[$f->name]) ? $data[$f->name] : '');

        $fsetLT->add($f);

        // hoverActions

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'ListerTweaks_options');
        $f->label = __('Lister options', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('listerHoverBtn', __('Show action buttons on hover', __FILE__));
        $f->addOption('hideTemplateEditAction', __('Hide template edit action', __FILE__));

        $f->attr('value', isset($data[$f->name]) ? $data[$f->name] : $defaultData[$f->name]);

        $fsetLT->add($f);

        $fset->add($fsetLT);

        // DeselectRadios ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'DeselectRadios');
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);
        $f->showIf = 'enabledSubmodules=DeselectRadios';

        $f->addOption('allowRequired', __('Enable for required fields&nbsp;(not recommended)', __FILE__));

        $f->attr('value', isset($data[$f->name]) ? $data[$f->name] : $defaultData[$f->name]);

        $fset->add($f);

        // FieldAndTemplateEditLinks ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldRadios');
        $f->attr('name', 'FieldAndTemplateEditLinks');
        $f->showIf = 'enabledSubmodules=FieldAndTemplateEditLinks';
        $f->collapsed = Inputfield::collapsedNever;
        $f->optionColumns = 3;

        $f->addOption('pw-blank', __('Open in new tab', __FILE__));
        $f->addOption('pw-panel', __('Open in panel', __FILE__));
        $f->addOption('pw-modal', __('Open in modal', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // FileFieldTweaks ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'FileFieldTweaks');
        $f->showIf = 'enabledSubmodules=FileFieldTweaks';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('filterbox', __('Filter box', __FILE__));
        $f->addOption('downloadAssetButton', __('Add asset download button', __FILE__));
        $f->addOption('imgSelectTitle', __('Add image titles to image select dialog', __FILE__));
        $f->addOption('moveAssetButtons', __('Add move to first/last buttons', __FILE__));
        $f->addOption('noFilenameTruncate', __('Disable filename truncation for File fields', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // FieldOverrides ----------------------------------------------- //

        if ($this->wire('modules')->isInstalled('InputfieldAceExtended')) {
            $f = $this->wire('modules')->get('InputfieldAceExtended');
            $f->mode = 'ini';
            $f->modes = array('ini');
            $f->theme = 'twilight';
        } else {
            $f = $this->wire('modules')->get('InputfieldTextarea');
        }

        $f->rows = 8;
        $f->attr('name', 'FieldOverrides');
        $f->label = __('FieldOverrides', __FILE__);
        $f->showIf = 'enabledSubmodules=FieldOverrides';
        $f->collapsed = Inputfield::collapsedNever;

        if (isset($this->FieldOverridesFile) && !empty($this->FieldOverridesFile)) {
            $f->notes = __('Additional items are prepended from this file (Asset Paths):', __FILE__) . ' `' . $this->FieldOverridesFile . '`';
        }

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // FocusInputOnLangTabSwitch ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldRadios');
        $f->attr('name', 'FocusInputOnLangTabSwitch');
        $f->showIf = 'enabledSubmodules=FocusInputOnLangTabSwitch';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('focus', __('Focus', __FILE__));
        $f->addOption('moveEnd', __('Move cursor to the end', __FILE__));
        $f->addOption('selectAll', __('Select all', __FILE__));
        $f->addOption('nothing', __('Do nothing', __FILE__));
        $f->optionColumns = 4;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        $f = wire('modules')->get('InputfieldRadios');
        $f->attr('name', 'FocusInputOnLangTabSwitchCKE');
        $f->label = __('FocusInputOnLangTabSwitch CKE', __FILE__);
        $f->showIf = 'enabledSubmodules=FocusInputOnLangTabSwitch';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('focus', __('Focus', __FILE__));
        $f->addOption('moveEnd', __('Move cursor to the end', __FILE__));
        $f->addOption('selectAll', __('Select all', __FILE__));
        $f->addOption('nothing', __('Do nothing', __FILE__));
        $f->optionColumns = 4;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // Hotkeys ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'Hotkeys');
        $f->showIf = 'enabledSubmodules=Hotkeys';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('breadcrumbTweaks', __('Add long-click and ctrl+click actions to breadcrumbs', __FILE__));
        $f->addOption('removeNoticeHotkey', __('Remove notices on first ESC keypress', __FILE__));
        $f->addOption('save', __('Save on', __FILE__) . ' `ctrl+s`');
        $f->addOption('focusSearch', __('Focus search on', __FILE__) . ' `alt+d`');
        $f->addOption('addPageTreeTrigger', __('Open page tree panel on', __FILE__) . ' `alt+o`');
        $f->addOption('filterboxHotkey', __('Focus filterbox on', __FILE__) . ' `als+s`');

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // InputfieldURLChecker ----------------------------------------------- //

        $fsetIUC = wire('modules')->get('InputfieldFieldset');
        $fsetIUC->attr('name', 'InputfieldURLChecker');
        $fsetIUC->label = __('InputfieldURLChecker', __FILE__);
        $fsetIUC->showIf = 'enabledSubmodules=InputfieldURLChecker';
//        $fsetIUC->collapsed = Inputfield::collapsedNever;

        // Mode
        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->name = 'IUC_mode';
        $f->label = __('Mode', __FILE__);
        $f->columnWidth = 50;
        $f->collapsed = Inputfield::collapsedNever;
        $f->addOption('button', __('Button', 'IUC'));
        $f->addOption('ctrl-shift-click', __('Ctrl + Shift + Click', 'IUC'));
        $f->addOption('ctrl-shift-enter', __('Ctrl + Shift + Enter', 'IUC'));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetIUC->add($f);

        // Mode - button
        $f = wire('modules')->get('InputfieldRadios');
        $f->name = 'IUC_buttonPosition';
        $f->label = __('Button position', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->columnWidth = 50;
        $f->addOption('button-left', __('Left side of the field', 'IUC'));
        $f->addOption('button-right', __('Right side of the field', 'IUC'));
        $f->showIf = 'IUC_mode=button';
        $f->requiredIf = 'IUC_mode=button';

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetIUC->add($f);

        // Target
        $f = wire('modules')->get('InputfieldRadios');
        $f->name = 'IUC_target';
        $f->label = __('Open URL in...', __FILE__);
//        $f->notes     = __('Iframe mode fails if the target website does not allow iframe embed.', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->addOption('pw-blank', __('new tab', __FILE__));
        $f->addOption('pw-modal', __('modal', __FILE__));
//        $f->addOption('pw-panel', __('panel', __FILE__));
        $f->optionColumns = 3;

//        $f->attr('value', isset($data[ $f->name ]) ? $data[ $f->name ] : $dataIUC[ $f->name ]);

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetIUC->add($f);

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->name = 'IUC_forceHttp';
        $f->label = __('Force HTTP prefix', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        $f->attr('value', $data[$f->name]);

        $f->checked = ($f->value == 1) ? 'checked' : '';

        $fsetIUC->add($f);

        // Enabled templates
        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->name = 'IUC_enabledTemplates';
        $f->label = __('Enabled templates', __FILE__);
        $f->attr('asmPlaceholder', __('Add templates...', __FILE__));
        $f->collapsed = Inputfield::collapsedNever;
        $f->columnWidth = 50;

        foreach ($this->wire('templates') as $t) {
            $f->addOption($t->name, self::getFormattedOptionName($t));
        }

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetIUC->add($f);

        // Enabled fields asmSelect
        $url_fields = wire('fields')->find('type=FieldtypeURL');

        // add asm select only if there is any URL type field

        if (count($url_fields) > 0) {

            $f = wire('modules')->get('InputfieldAsmSelect');
            $f->name = 'IUC_enabledFields';
            $f->label = __('Enabled fields', __FILE__);
            $f->collapsed = Inputfield::collapsedNever;
            $f->columnWidth = 50;
            $f->attr('asmPlaceholder', __('Add fields...', __FILE__));

            foreach ($url_fields as $url_field) {
                $f->addOption($url_field->name, self::getFormattedOptionName($url_field));
            }

            $f->attr('asmPlaceholder', __('Add fields...', __FILE__));

//            $f->attr('value', isset($data[ $f->name ]) ? $data[ $f->name ] : $dataIUC[ $f->name ]);
            if ($data[$f->name]) {
                $f->attr('value', $data[$f->name]);
            }

        } else {

            // add info that no URL type fields are available
            $f = wire('modules')->get('InputfieldMarkup');
            $f->name = 'no_url_fields';
            $f->label = __('Enabled fields', __FILE__);
            // doesn't work
            // $f->collapsed = Inputfield::collapsedNever;
            $f->markupText = __('There is no URL field available', __FILE__);
        }

        $fsetIUC->add($f);

        $fset->add($fsetIUC);

        // LongClickDuration ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldText');
        $f->attr('name', 'LongClickDuration');
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);
        $f->showIf = 'enabledSubmodules=LongClickDuration';
        $f->attr('style', 'width: 100px; display: none !important;');
        $f->attr('data-no-titlecasetoggle', 'true');
        $f->collapsed = Inputfield::collapsedNever;

        $f->attr('value',
            (isset($data[$f->name]) && (int) $data[$f->name] >= $defaultData[$f->name]) ? $data[$f->name] : $defaultData[$f->name]);

        $fset->add($f);

        // Misc ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'Misc');
        $f->showIf = 'enabledSubmodules=Misc';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('addFieldWrapAttributes', __('Add data-attributes to field wrappers containing field name, id, type, etc', __FILE__));
        $f->addOption('adminColumns', __('Add `aos_column_break` field to create admin columns', __FILE__));
        $f->addOption('adminLangSwitcher', __('Add language switcher to the admin', __FILE__));
        $f->addOption('addTranslatorLinks',
            __('Add links to Language Translator to edit current textdomain file in other languages', __FILE__));
        $f->addOption('autosizeTextareas', __('Autosize textareas according to content', __FILE__));
        $f->addOption('addOrRemoveFieldsTweaks',
            __('Add helper buttons to batch field add/remove confirmation pages&nbsp;("Clear all", "Apply to all")',
                __FILE__));
        $f->addOption('centerLogin', __('Center login form', __FILE__));
        $f->addOption('homeOpenNewTab', __('Open Home/View site in new tab (topnav)', __FILE__));
        $f->addOption('dataTableFilter', __('Add filter box to AdminDataTables', __FILE__));
        $f->addOption('transFilter', __('Add filter box to Language Translator', __FILE__));
        $f->addOption('langTabHotkeySwitcher', __('Switch language tabs on ctrl+arrow keys', __FILE__));
        $f->addOption('noAnim', __('Disable all admin animations', __FILE__));
        $f->addOption('hoverDropdown', __('Show save dropdown on hover instead on click', __FILE__));
        $f->addOption('titleCaseToggle', __('Add button to toggle case of Pagetitle and text field contents', __FILE__));
        $f->addOption('tabIndex', __('Add sequential tabindex to fields', __FILE__));
        $f->addOption('showSystemTemplates', __('Force showing system templates', __FILE__));
        $f->addOption('iconsFilter', __('Add filter box to template icon picker', __FILE__));
        $f->addOption('uncheckAddnewActive',
            __('Add new page: uncheck `Active?` for non-default language names', __FILE__));
        $f->addOption('hideAddNewDropdown',
            __('Hide the `Add new` dropdown button from above the main pagelist', __FILE__));
        $f->addOption('stickyCKE', __('Sticky CKEditor toolbar', __FILE__));
        $f->addOption('themeConfigLinks', __('Add Profile page links to configure admin themes (SuperUser only)', __FILE__));
        $f->addOption('prevNextLinks', __('Add links to edit previous and next pages', __FILE__));
        $f->addOption('logsHelperTweaks', __('Expand Helpers field on Logs page and use radio buttons for log actions', __FILE__));
        $f->addOption('headBtnToTitle', __('Place header button next to the main title', __FILE__));
        $f->addOption('inputMask', __('Add input mask to Input fields (JavaScript only)', __FILE__));
        $f->addOption('inputMaskPhoneLib', __('Load phone country library for input mask', __FILE__));
        $f->addOption('checkAllCheckboxes', __('Add button to check/uncheck all checkboxes (appears on hover)', __FILE__));
        $f->addOption('miniScrollbar', __('Use mini scrollbars (Chrome only)', __FILE__));
        $f->addOption('extendedFieldList', __('Show additional field details on Fields setup page', __FILE__));
        $f->addOption('translatorModal', __('Open Language Translator in a modal window', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // ModuleTweaks ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'ModuleTweaks');
        $f->showIf = 'enabledSubmodules=ModuleTweaks';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

        $f->addOption('moduleCompact', __('Compact module list', __FILE__));
        $f->addOption('flatModules', __('Do not distribute modules into tabs', __FILE__));
        $f->addOption('loadCollapsedModuleInfos', __('Load module info fields collapsed', __FILE__));
        $f->addOption('moduleModal', __('Edit modules in modal on long-click', __FILE__));
        $f->addOption('moduleFilter', __('Add filter box to module list', __FILE__));
        $f->addOption('moduleBrowserTitle', __('Set browser title to module name', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // NavItems ----------------------------------------------- //

        $fsetCNI = wire('modules')->get('InputfieldFieldset');
        $fsetCNI->attr('name', 'NavItems');
        $fsetCNI->label = __('NavItems', __FILE__);
        $fsetCNI->showIf = 'enabledSubmodules=NavItems';

        $f = wire('modules')->get('InputfieldText');
        $f->attr('name', 'NavItems_pages_submenu');
        $f->label = __('Group selected pages into submenu:', __FILE__);
        $f->attr('placeholder', __('submenu name... (optional)', __FILE__));
        $f->attr('data-no-titlecasetoggle', 'true');
        $f->collapsed = Inputfield::collapsedNever;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCNI->add($f);

        $f = wire('modules')->get('InputfieldPageListSelectMultiple');
        $f->name = 'NavItems_pages';
        $f->label = __('Select pages', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCNI->add($f);

        $f = wire('modules')->get('InputfieldTextarea');
        $f->attr('name', 'NavItems_custom');
        $f->label = __('Custom items', __FILE__);
        $f->attr('placeholder', '// ! AdminOnSteroids: /module/edit?name=AdminOnSteroids');
        $f->rows = 3;
        $f->collapsed = Inputfield::collapsedNever;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetCNI->add($f);

        $fset->add($fsetCNI);

        // PageListIcons ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldTextarea');
        $f->attr('name', 'PageListIcons');
        $f->label = __('PageList icons', __FILE__);
        $f->showIf = 'enabledSubmodules=PageListIcons';
        $f->collapsed = Inputfield::collapsedNever;

        if (isset($data[$f->name]) && $data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // PageListThumbs ----------------------------------------------- //

        $fsetPageListThumbs = wire('modules')->get('InputfieldFieldset');
        $fsetPageListThumbs->attr('name', 'PageListThumbs');
        $fsetPageListThumbs->label = __('PageListThumbs', __FILE__);
        $fsetPageListThumbs->showIf = 'enabledSubmodules=PageListThumbs';
//        $fsetPageListThumbs->collapsed = Inputfield::collapsedNever;

        $f = wire('modules')->get('InputfieldRadios');
        $f->attr('name', 'PageListThumbs_style');
        $f->label = __('Style', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('circle', __('circle', __FILE__));
        $f->addOption('square', __('square', __FILE__));
        $f->addOption('default', __('default', __FILE__));
        $f->optionColumns = 4;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        } else {
            $f->attr('value', $data['PageListThumbs'][$f->name]);
        }

        $fsetPageListThumbs->add($f);

        $f = wire('modules')->get('InputfieldTextarea');
        $f->attr('name', 'PageListThumbs_items');
        $f->label = __('Source', __FILE__);
        $f->attr('placeholder', __('Enter field or field:selector pair(s)', __FILE__));
        $f->rows = 3;
        $f->collapsed = Inputfield::collapsedNever;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        } else {
            $f->attr('value', $data['PageListThumbs'][$f->name]);
        }

        $fsetPageListThumbs->add($f);

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'PageListThumbs_options');
        $f->label = __('Settings', __FILE__); // Thumb settings
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('alignright', __('Align thumbs to right', __FILE__));

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        } else {
            $f->attr('value', $data['PageListThumbs'][$f->name]);
        }

        $fsetPageListThumbs->add($f);

        $fset->add($fsetPageListThumbs);

        // PageListTweaks ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'PageListTweaks');
        $f->label = __('PageListTweaks', __FILE__);
        $f->showIf = 'enabledSubmodules=PageListTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('highlightRows', __('Highlight rows on hover', __FILE__));
        $f->addOption('pListIDs', __('Show page IDs (SuperUser only)', __FILE__));
        $f->addOption('refreshBtn', __('Add Refresh button to refresh page details displayed', __FILE__));
        $f->addOption('deleteBtn', __('Add pagelist Delete action and page edit checkbox to bypass Trash (SuperUser only)', __FILE__));
        $f->addOption('stickyBtn', __('Add Sticky button to pagelist', __FILE__));
        $f->addOption('pListUnselect', __('Add unselect/restore buttons to PageListSelect', __FILE__));
        $f->addOption('pListIconOnly', __('Icon-only pagelist actions', __FILE__));
        $f->addOption('pListMiddleClick', __('Use middle mouse click/ctrl+click to View/Edit page', __FILE__));
        $f->addOption('pListActiveBold', __('Make active pagelist items bold', __FILE__));
        $f->addOption('pListShowActions', __('Always show pagelist actions', __FILE__));
        $f->addOption('pListShowExtras', __('Always show extra actions', __FILE__));
        $f->addOption('pListMarkup', __('Allow markup tokens for "List of fields to display"', __FILE__));
        $f->addOption('pListCounters', __('Add counters to pagelist items', __FILE__));
        $f->addOption('pListFullRowHover', __('Show pagelist actions on full row hover', __FILE__));
        $f->addOption('pListTrash', __('Add Trash action also for non-SuperUsers', __FILE__));
//        $f->addOption('pListLangs', __('Add language indicators', __FILE__));

        if (isset($data[$f->name]) && $data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // PagePreviewBtn ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldRadios');
        $f->attr('name', 'PagePreviewBtn');
        $f->label = __('PagePreviewButton', __FILE__);
        $f->showIf = 'enabledSubmodules=PagePreviewBtn';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('pw-blank', __('Preview in new tab', __FILE__));
        $f->addOption('pw-panel', __('Preview in panel', __FILE__));
        $f->addOption('pw-modal', __('Preview in modal', __FILE__));
        $f->optionColumns = 3;

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // RenoTweaks ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'RenoTweaks');
        $f->label = __('RenoTweaks', __FILE__);
        $f->showIf = 'enabledSubmodules=RenoTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('headSticky', __('Sticky header', __FILE__));
        $f->addOption('headStickyCompact', __('Compact header', __FILE__));
        $f->addOption('sbSticky', __('Sticky sidebar', __FILE__));
        $f->addOption('sbItemsVisible', __('Always show sidebar items (disable accordion)', __FILE__));
        $f->addOption('sbSingleClickHeads', __('Single click navigation of sidebar headers', __FILE__));
        $f->addOption('sbItemsInline', __('Inline sidebar items', __FILE__));
        $f->addOption('sbQuickLinksHide', __('Hide sidebar quick links (flash icons)', __FILE__));
        $f->addOption('sbAutoHide', __('Autohide sidebar', __FILE__));
        $f->addOption('pListCompact', __('Use narrow pagelist rows', __FILE__));
        $f->addOption('openSearch', __('Always show search field', __FILE__));
        $f->addOption('hoverTopSubmenus', __('Show topnav submenus on hover instead click', __FILE__));
        $f->addOption('noticeLeftX', __('Move notice close buttons to the left', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // RestrictTreeDropdown ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldAsmSelect');
        $f->attr('name', 'RestrictTreeDropdown');
        $f->label = __('RestrictTreeDropdown', __FILE__);
        $f->description = __('Hide tree dropdown for the following roles:', __FILE__);
        $f->showIf = 'enabledSubmodules=RestrictTreeDropdown';
        $f->collapsed = Inputfield::collapsedNever;
        $f->attr('asmPlaceholder', __('Add roles...', __FILE__));

        $roles = $this->wire('roles')->find('name!=guest');
        $f->addOption('all-roles', $this->_('all'));
        $f->addOption('nonsuperuser', $this->_('all non-superuser'));
        foreach ($roles as $select_option) {
            $f->addOption($select_option->name);
        }

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // Tooltips ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'Tooltips');
        $f->label = __('Tooltips', __FILE__);
        $f->showIf = 'enabledSubmodules=Tooltips';
        $f->collapsed = Inputfield::collapsedNever;
        $f->description = __('', __FILE__);
        $f->notes = __('', __FILE__);

//        $f->addOption('superuseronly', __('Only for SuperUsers', __FILE__));
        $f->addOption('tooltipDesc', __('Enable for field descriptions', __FILE__));
        $f->addOption('tooltipNotes', __('Enable for field notes', __FILE__));
        $f->addOption('tooltipOverlay', __('Use overlay style', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        // UikitTweaks ----------------------------------------------- //

        $f = wire('modules')->get('InputfieldCheckboxes');
        $f->attr('name', 'UikitTweaks');
        $f->label = __('UikitTweaks', __FILE__);
        $f->showIf = 'enabledSubmodules=UikitTweaks';
        $f->collapsed = Inputfield::collapsedNever;

        $f->addOption('headSticky', __('Sticky header', __FILE__));
        $f->addOption('headCompact', __('Compact (smaller) header', __FILE__));

        if ($data[$f->name]) {
            $f->attr('value', $data[$f->name]);
        }

        $fset->add($f);

        $wrapper->add($fset);

        // Assets paths

        $fsetPaths = wire('modules')->get('InputfieldFieldset');
        $fsetPaths->attr('name', 'AssetPaths');
        $fsetPaths->label = __('Asset Paths', __FILE__);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'AdminStyle';
        $f->label = __('Admin CSS', __FILE__);
        $f->description = __('URL to a CSS file to be loaded in the admin, eg.',
            __FILE__) . ' "/site/templates/admin/admin.css"';
        $f->attr('data-no-titlecasetoggle', 'true');
        $f->collapsed = Inputfield::collapsedBlank;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetPaths->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'AdminScript';
        $f->label = __('Admin JavaScript', __FILE__);
        $f->description = __('URL to a JavaScript file to be loaded in the admin, eg.',
            __FILE__) . ' "/site/templates/admin/admin.js"';
        $f->attr('data-no-titlecasetoggle', 'true');
        $f->collapsed = Inputfield::collapsedBlank;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        }

        $fsetPaths->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'CKEStyle';
        $f->label = __('CKEditor custom CSS', __FILE__);
        $f->description = __('URL to a CSS file to be loaded for CKEditors, eg.',
            __FILE__) . ' "/site/templates/admin/cke.css"';
        $f->attr('data-no-titlecasetoggle', 'true');
        $f->collapsed = Inputfield::collapsedBlank;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        }
        $fsetPaths->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'CKEScript';
        $f->label = __('CKEditor custom configuration script', __FILE__);
        $f->description = __('URL to a JavaScript file to be loaded for CKEditors, eg.',
            __FILE__) . ' "/site/templates/admin/cke.js"';
        $f->attr('data-no-titlecasetoggle', 'true');
        $f->collapsed = Inputfield::collapsedBlank;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        }
        $fsetPaths->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'CKEtemplates';
        $f->label = __('CKEditor templates directory', __FILE__);
        $f->description = __('URL to Content Templates CKEditor plugin templates directory, eg',
            __FILE__) . ' "/site/templates/admin/cke-templates.js".' .
        ' [' . __('Info', __FILE__) . '](https://ckeditor.com/cke4/addon/templates)';
        $f->attr('data-no-titlecasetoggle', 'true');
        $f->collapsed = Inputfield::collapsedBlank;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        }
        $fsetPaths->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'FieldOverridesFile';
        $f->label = __('FieldOverrides file', __FILE__);
        $f->description = __('File to prepend to the admin textarea config, eg',
            __FILE__) . ' "/site/templates/field-overrides.ini"';
        $f->attr('data-no-titlecasetoggle', 'true');
        $f->collapsed = Inputfield::collapsedBlank;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        }
        $fsetPaths->add($f);

        $f = wire('modules')->get('InputfieldText');
        $f->name = 'BrandingLogo';
        $f->label = __('Branding logo', __FILE__);
        $f->description = __('Path to image for replacing ProcessWire logo in the header, eg.',
            __FILE__) . ' "/site/templates/images/brand-logo.svg"';
        $f->attr('data-no-titlecasetoggle', 'true');        
        $f->collapsed = Inputfield::collapsedBlank;

        if (isset($data[$f->name])) {
            $f->attr('value', $data[$f->name]);
        }
        $fsetPaths->add($f);

        $wrapper->add($fsetPaths);

        // Restore settings checkbox

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->name = 'restore';
        $f->label = __('Restore settings on next install', __FILE__);
//        $f->description = __('Enable saving module configuration data to file on uninstall to import it on next install.', __FILE__);
        $f->notes = __('Enable saving module configuration data to file on uninstall to import it on next install.',
            __FILE__) . ' ' . __('Make sure to save the module first when changing this value.', __FILE__);
        $f->collapsed = Inputfield::collapsedNever;
        $f->value = $data[$f->name];

        $f->checked = ($f->value == 1) ? 'checked' : '';

        $wrapper->add($f);

        // add roles asmSelects

        // no need to add if module is disabled
        if ($this->enabled) {
            foreach ($data['enabledSubmodules'] as $submodule) {
                if (in_array($submodule, array('FieldAndTemplateEditLinks', 'ModuleTweaks', 'RestrictTreeDropdown'))) {
                    continue;
                }
                $this->addRoleFields($submodule, $data, $wrapper);
            }
        }

        return $wrapper;
    }
}
